// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/internal/utest"
)

func TestSet613(t *testing.T) {
	t.Parallel()

	ctx := utest.NewTestContext()
	ctx.T = t
	ctx.Vars = map[string]interface{}{}

	ctx.SetVar("Region", "cn-sh2")
	ctx.SetVar("Zone", "cn-sh2-02")

	ctx.SetVar("Image_Id", "#{u_get_image_resource($Region,$Zone)}")

	testSet613DescribeImage00(&ctx)
	testSet613CreateVPC01(&ctx)
	testSet613CreateSubnet02(&ctx)
	testSet613CreateUHostInstance03(&ctx)
	testSet613AllocateEIP04(&ctx)
	testSet613DescribeFirewall05(&ctx)
	testSet613CreateNATGW06(&ctx)
	testSet613DescribeEIP07(&ctx)
	testSet613CreateNATGWPolicy08(&ctx)
	testSet613CreateNATGWPolicy09(&ctx)
	testSet613CreateNATGWPolicy10(&ctx)
	testSet613CreateNATGWPolicy11(&ctx)
	testSet613DescribeNATGWPolicy12(&ctx)
	testSet613GetAvailableResourceForPolicy13(&ctx)
	testSet613UpdateNATGWPolicy14(&ctx)
	testSet613UpdateNATGWPolicy15(&ctx)
	testSet613UpdateNATGWPolicy16(&ctx)
	testSet613UpdateNATGWPolicy17(&ctx)
	testSet613DeleteNATGWPolicy18(&ctx)
	testSet613DeleteNATGWPolicy19(&ctx)
	testSet613DeleteNATGWPolicy20(&ctx)
	testSet613DeleteNATGWPolicy21(&ctx)
	testSet613DeleteNATGW22(&ctx)
	testSet613ReleaseEIP23(&ctx)
	testSet613PoweroffUHostInstance24(&ctx)
	testSet613TerminateUHostInstance25(&ctx)
	testSet613DeleteSubnet26(&ctx)
	testSet613DeleteVPC27(&ctx)
}

func testSet613DescribeImage00(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := uhostClient.NewDescribeImageRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "OsType", "Linux"))

	ctx.NoError(utest.SetReqValue(req, "ImageType", "Base"))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return uhostClient.DescribeImage(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "DescribeImageResponse", "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 1 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["Image_Id"] = ctx.Must(utest.GetValue(resp, "ImageSet.0.ImageId"))
}

func testSet613CreateVPC01(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := vpcClient.NewCreateVPCRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "Network", "172.16.0.0/12"))

	ctx.NoError(utest.SetReqValue(req, "Name", "vpc-natgw-bgp"))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.CreateVPC(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["VPCId"] = ctx.Must(utest.GetValue(resp, "VPCId"))
}

func testSet613CreateSubnet02(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewCreateSubnetRequest()

	ctx.NoError(utest.SetReqValue(req, "VPCId", ctx.GetVar("VPCId")))

	ctx.NoError(utest.SetReqValue(req, "SubnetName", "natgw-s1-bgp"))

	ctx.NoError(utest.SetReqValue(req, "Subnet", "172.16.0.0"))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "Netmask", 21))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.CreateSubnet(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["SubnetId"] = ctx.Must(utest.GetValue(resp, "SubnetId"))
}

func testSet613CreateUHostInstance03(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := uhostClient.NewCreateUHostInstanceRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "VPCId", ctx.GetVar("VPCId")))

	ctx.NoError(utest.SetReqValue(req, "TimemachineFeature", "No"))

	ctx.NoError(utest.SetReqValue(req, "Tag", "Default"))

	ctx.NoError(utest.SetReqValue(req, "SubnetId", ctx.GetVar("SubnetId")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "Password", "VXFhNzg5VGVzdCFAIyQ7LA=="))

	ctx.NoError(utest.SetReqValue(req, "Name", "natgw-s1-bgp"))

	ctx.NoError(utest.SetReqValue(req, "Memory", 1024))

	ctx.NoError(utest.SetReqValue(req, "LoginMode", "Password"))

	ctx.NoError(utest.SetReqValue(req, "ImageId", ctx.GetVar("Image_Id")))

	ctx.NoError(utest.SetReqValue(req, "HotplugFeature", false))

	ctx.NoError(utest.SetReqValue(req, "DiskSpace", 0))

	ctx.NoError(utest.SetReqValue(req, "CPU", 1))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return uhostClient.CreateUHostInstance(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["UHostIds_s1"] = ctx.Must(utest.GetValue(resp, "UHostIds.0"))
	ctx.Vars["IPs_s1"] = ctx.Must(utest.GetValue(resp, "IPs.0"))
}

func testSet613AllocateEIP04(ctx *utest.TestContext) {
	time.Sleep(time.Duration(180) * time.Second)

	req := unetClient.NewAllocateEIPRequest()

	ctx.NoError(utest.SetReqValue(req, "Tag", "Default"))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "Quantity", 1))

	ctx.NoError(utest.SetReqValue(req, "PayMode", "Bandwidth"))

	ctx.NoError(utest.SetReqValue(req, "OperatorName", "Bgp"))

	ctx.NoError(utest.SetReqValue(req, "Name", "natgw-eip-bgp"))

	ctx.NoError(utest.SetReqValue(req, "ChargeType", "Month"))

	ctx.NoError(utest.SetReqValue(req, "Bandwidth", 2))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return unetClient.AllocateEIP(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["EIPId"] = ctx.Must(utest.GetValue(resp, "EIPSet.0.EIPId"))
	ctx.Vars["EIP"] = ctx.Must(utest.GetValue(resp, "EIPSet.0.EIPAddr.0.IP"))
}

func testSet613DescribeFirewall05(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := unetClient.NewDescribeFirewallRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return unetClient.DescribeFirewall(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["FWId"] = ctx.Must(utest.GetValue(resp, "DataSet"))
}

func testSet613CreateNATGW06(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewCreateNATGWRequest()

	ctx.NoError(utest.SetReqValue(req, "VPCId", ctx.GetVar("VPCId")))

	ctx.NoError(utest.SetReqValue(req, "Tag", "Default"))

	ctx.NoError(utest.SetReqValue(req, "SubnetworkIds", ctx.GetVar("SubnetId")))

	ctx.NoError(utest.SetReqValue(req, "Remark", "bgp"))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "NATGWName", "natgw-bgp"))

	ctx.NoError(utest.SetReqValue(req, "FirewallId", ctx.Must(utest.SearchValue(ctx.GetVar("FWId"), "Type", "recommend web", "FWId"))))

	ctx.NoError(utest.SetReqValue(req, "EIPIds", ctx.GetVar("EIPId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.CreateNATGW(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    10,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet613DescribeEIP07(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := unetClient.NewDescribeEIPRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "EIPIds", ctx.GetVar("EIPId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return unetClient.DescribeEIP(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("EIPSet.0.Resource.ResourceType", "natgw", "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["NATGWId"] = ctx.Must(utest.GetValue(resp, "EIPSet.0.Resource.ResourceID"))
}

func testSet613CreateNATGWPolicy08(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewCreateNATGWPolicyRequest()

	ctx.NoError(utest.SetReqValue(req, "SrcPort", 80))

	ctx.NoError(utest.SetReqValue(req, "SrcEIPId", ctx.GetVar("EIPId")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "Protocol", "TCP"))

	ctx.NoError(utest.SetReqValue(req, "PolicyName", "tcp"))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	ctx.NoError(utest.SetReqValue(req, "DstPort", 80))

	ctx.NoError(utest.SetReqValue(req, "DstIP", ctx.GetVar("IPs_s1")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.CreateNATGWPolicy(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["PolicyId_01"] = ctx.Must(utest.GetValue(resp, "PolicyId"))
}

func testSet613CreateNATGWPolicy09(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewCreateNATGWPolicyRequest()

	ctx.NoError(utest.SetReqValue(req, "SrcPort", 80))

	ctx.NoError(utest.SetReqValue(req, "SrcEIPId", ctx.GetVar("EIPId")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "Protocol", "UDP"))

	ctx.NoError(utest.SetReqValue(req, "PolicyName", "udp"))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	ctx.NoError(utest.SetReqValue(req, "DstPort", 80))

	ctx.NoError(utest.SetReqValue(req, "DstIP", ctx.GetVar("IPs_s1")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.CreateNATGWPolicy(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["PolicyId_02"] = ctx.Must(utest.GetValue(resp, "PolicyId"))
}

func testSet613CreateNATGWPolicy10(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewCreateNATGWPolicyRequest()

	ctx.NoError(utest.SetReqValue(req, "SrcPort", "1024-2048"))

	ctx.NoError(utest.SetReqValue(req, "SrcEIPId", ctx.GetVar("EIPId")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "Protocol", "TCP"))

	ctx.NoError(utest.SetReqValue(req, "PolicyName", "tcp段"))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	ctx.NoError(utest.SetReqValue(req, "DstPort", "1024-2048"))

	ctx.NoError(utest.SetReqValue(req, "DstIP", ctx.GetVar("IPs_s1")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.CreateNATGWPolicy(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["PolicyId_03"] = ctx.Must(utest.GetValue(resp, "PolicyId"))
}

func testSet613CreateNATGWPolicy11(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewCreateNATGWPolicyRequest()

	ctx.NoError(utest.SetReqValue(req, "SrcPort", "1024-2048"))

	ctx.NoError(utest.SetReqValue(req, "SrcEIPId", ctx.GetVar("EIPId")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "Protocol", "UDP"))

	ctx.NoError(utest.SetReqValue(req, "PolicyName", "udp段"))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	ctx.NoError(utest.SetReqValue(req, "DstPort", "1024-2048"))

	ctx.NoError(utest.SetReqValue(req, "DstIP", ctx.GetVar("IPs_s1")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.CreateNATGWPolicy(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["PolicyId_04"] = ctx.Must(utest.GetValue(resp, "PolicyId"))
}

func testSet613DescribeNATGWPolicy12(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewDescribeNATGWPolicyRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.DescribeNATGWPolicy(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet613GetAvailableResourceForPolicy13(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewGetAvailableResourceForPolicyRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.GetAvailableResourceForPolicy(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet613UpdateNATGWPolicy14(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewUpdateNATGWPolicyRequest()

	ctx.NoError(utest.SetReqValue(req, "SrcPort", 90))

	ctx.NoError(utest.SetReqValue(req, "SrcEIPId", ctx.GetVar("EIPId")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "Protocol", "UDP"))

	ctx.NoError(utest.SetReqValue(req, "PolicyName", "udp-gai"))

	ctx.NoError(utest.SetReqValue(req, "PolicyId", ctx.GetVar("PolicyId_01")))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	ctx.NoError(utest.SetReqValue(req, "DstPort", 90))

	ctx.NoError(utest.SetReqValue(req, "DstIP", ctx.GetVar("IPs_s1")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.UpdateNATGWPolicy(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet613UpdateNATGWPolicy15(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewUpdateNATGWPolicyRequest()

	ctx.NoError(utest.SetReqValue(req, "SrcPort", 90))

	ctx.NoError(utest.SetReqValue(req, "SrcEIPId", ctx.GetVar("EIPId")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "Protocol", "TCP"))

	ctx.NoError(utest.SetReqValue(req, "PolicyName", "tcp-gai"))

	ctx.NoError(utest.SetReqValue(req, "PolicyId", ctx.GetVar("PolicyId_02")))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	ctx.NoError(utest.SetReqValue(req, "DstPort", 90))

	ctx.NoError(utest.SetReqValue(req, "DstIP", ctx.GetVar("IPs_s1")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.UpdateNATGWPolicy(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet613UpdateNATGWPolicy16(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewUpdateNATGWPolicyRequest()

	ctx.NoError(utest.SetReqValue(req, "SrcPort", "8080-8088"))

	ctx.NoError(utest.SetReqValue(req, "SrcEIPId", ctx.GetVar("EIPId")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "Protocol", "UDP"))

	ctx.NoError(utest.SetReqValue(req, "PolicyName", "udp段-gai"))

	ctx.NoError(utest.SetReqValue(req, "PolicyId", ctx.GetVar("PolicyId_03")))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	ctx.NoError(utest.SetReqValue(req, "DstPort", "8080-8088"))

	ctx.NoError(utest.SetReqValue(req, "DstIP", ctx.GetVar("IPs_s1")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.UpdateNATGWPolicy(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet613UpdateNATGWPolicy17(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewUpdateNATGWPolicyRequest()

	ctx.NoError(utest.SetReqValue(req, "SrcPort", "8080-8088"))

	ctx.NoError(utest.SetReqValue(req, "SrcEIPId", ctx.GetVar("EIPId")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "Protocol", "TCP"))

	ctx.NoError(utest.SetReqValue(req, "PolicyName", "tcp段-gai"))

	ctx.NoError(utest.SetReqValue(req, "PolicyId", ctx.GetVar("PolicyId_04")))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	ctx.NoError(utest.SetReqValue(req, "DstPort", "8080-8088"))

	ctx.NoError(utest.SetReqValue(req, "DstIP", ctx.GetVar("IPs_s1")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.UpdateNATGWPolicy(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet613DeleteNATGWPolicy18(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewDeleteNATGWPolicyRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "PolicyId", ctx.GetVar("PolicyId_01")))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.DeleteNATGWPolicy(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet613DeleteNATGWPolicy19(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewDeleteNATGWPolicyRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "PolicyId", ctx.GetVar("PolicyId_02")))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.DeleteNATGWPolicy(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet613DeleteNATGWPolicy20(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewDeleteNATGWPolicyRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "PolicyId", ctx.GetVar("PolicyId_03")))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.DeleteNATGWPolicy(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet613DeleteNATGWPolicy21(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewDeleteNATGWPolicyRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "PolicyId", ctx.GetVar("PolicyId_04")))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.DeleteNATGWPolicy(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet613DeleteNATGW22(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewDeleteNATGWRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.DeleteNATGW(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet613ReleaseEIP23(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := unetClient.NewReleaseEIPRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "EIPId", ctx.GetVar("EIPId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return unetClient.ReleaseEIP(req)
		},
		Validators:    []utest.TestValidator{},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet613PoweroffUHostInstance24(ctx *utest.TestContext) {
	time.Sleep(time.Duration(5) * time.Second)

	req := uhostClient.NewPoweroffUHostInstanceRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "UHostId", ctx.GetVar("UHostIds_s1")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return uhostClient.PoweroffUHostInstance(req)
		},
		Validators:    []utest.TestValidator{},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet613TerminateUHostInstance25(ctx *utest.TestContext) {
	time.Sleep(time.Duration(60) * time.Second)

	req := uhostClient.NewTerminateUHostInstanceRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "UHostId", ctx.GetVar("UHostIds_s1")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return uhostClient.TerminateUHostInstance(req)
		},
		Validators:    []utest.TestValidator{},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet613DeleteSubnet26(ctx *utest.TestContext) {
	time.Sleep(time.Duration(5) * time.Second)

	req := vpcClient.NewDeleteSubnetRequest()

	ctx.NoError(utest.SetReqValue(req, "SubnetId", ctx.GetVar("SubnetId")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.DeleteSubnet(req)
		},
		Validators:    []utest.TestValidator{},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet613DeleteVPC27(ctx *utest.TestContext) {
	time.Sleep(time.Duration(5) * time.Second)

	req := vpcClient.NewDeleteVPCRequest()

	ctx.NoError(utest.SetReqValue(req, "VPCId", ctx.GetVar("VPCId")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.DeleteVPC(req)
		},
		Validators:    []utest.TestValidator{},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}
