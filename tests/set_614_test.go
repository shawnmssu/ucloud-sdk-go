// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/internal/utest"
)

func TestSet614(t *testing.T) {
	t.Parallel()

	ctx := utest.NewTestContext()
	ctx.T = t
	ctx.Vars = map[string]interface{}{}

	ctx.SetVar("Region", "cn-sh2")
	ctx.SetVar("Zone", "cn-sh2-02")

	ctx.SetVar("Image_Id_cloud", "#{u_get_image_resource($Region,$Zone)}")

	testSet614DescribeImage00(&ctx)
	testSet614CreateVPC01(&ctx)
	testSet614CreateSubnet02(&ctx)
	testSet614CreateUHostInstance03(&ctx)
	testSet614AllocateEIP04(&ctx)
	testSet614DescribeFirewall05(&ctx)
	testSet614CreateNATGW06(&ctx)
	testSet614DescribeEIP07(&ctx)
	testSet614GetAvailableResourceForWhiteList08(&ctx)
	testSet614GetAvailableHostForWhiteList09(&ctx)
	testSet614AddWhiteListResource10(&ctx)
	testSet614DescribeWhiteListResource11(&ctx)
	testSet614DeleteWhiteListResource12(&ctx)
	testSet614DescribeWhiteList13(&ctx)
	testSet614EnableWhiteList14(&ctx)
	testSet614DeleteNATGW15(&ctx)
	testSet614ReleaseEIP16(&ctx)
	testSet614PoweroffUHostInstance17(&ctx)
	testSet614TerminateUHostInstance18(&ctx)
	testSet614DeleteSubnet19(&ctx)
	testSet614DeleteVPC20(&ctx)
}

func testSet614DescribeImage00(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := uhostClient.NewDescribeImageRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "OsType", "Linux"))

	ctx.NoError(utest.SetReqValue(req, "ImageType", "Base"))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return uhostClient.DescribeImage(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "DescribeImageResponse", "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 1 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["Image_Id_cloud"] = ctx.Must(utest.GetValue(resp, "ImageSet.0.ImageId"))
}

func testSet614CreateVPC01(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewCreateVPCRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "Network", "172.16.0.0/12"))

	ctx.NoError(utest.SetReqValue(req, "Name", "vpc-natgw-bgp"))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.CreateVPC(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["VPCId"] = ctx.Must(utest.GetValue(resp, "VPCId"))
}

func testSet614CreateSubnet02(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewCreateSubnetRequest()

	ctx.NoError(utest.SetReqValue(req, "VPCId", ctx.GetVar("VPCId")))

	ctx.NoError(utest.SetReqValue(req, "SubnetName", "natgw-s1-bgp"))

	ctx.NoError(utest.SetReqValue(req, "Subnet", "172.16.0.0"))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "Netmask", 21))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.CreateSubnet(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["SubnetId"] = ctx.Must(utest.GetValue(resp, "SubnetId"))
}

func testSet614CreateUHostInstance03(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := uhostClient.NewCreateUHostInstanceRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "VPCId", ctx.GetVar("VPCId")))

	ctx.NoError(utest.SetReqValue(req, "TimemachineFeature", "No"))

	ctx.NoError(utest.SetReqValue(req, "Tag", "Default"))

	ctx.NoError(utest.SetReqValue(req, "SubnetId", ctx.GetVar("SubnetId")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "Password", "VXFhNzg5VGVzdCFAIyQ7LA=="))

	ctx.NoError(utest.SetReqValue(req, "Name", "natgw-s1-bgp"))

	ctx.NoError(utest.SetReqValue(req, "Memory", 1024))

	ctx.NoError(utest.SetReqValue(req, "LoginMode", "Password"))

	ctx.NoError(utest.SetReqValue(req, "ImageId", ctx.GetVar("Image_Id_cloud")))

	ctx.NoError(utest.SetReqValue(req, "HotplugFeature", false))

	ctx.NoError(utest.SetReqValue(req, "DiskSpace", 0))

	ctx.NoError(utest.SetReqValue(req, "CPU", 1))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return uhostClient.CreateUHostInstance(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["UHostIds_s1"] = ctx.Must(utest.GetValue(resp, "UHostIds.0"))
	ctx.Vars["IPs_s1"] = ctx.Must(utest.GetValue(resp, "IPs.0"))
}

func testSet614AllocateEIP04(ctx *utest.TestContext) {
	time.Sleep(time.Duration(180) * time.Second)

	req := unetClient.NewAllocateEIPRequest()

	ctx.NoError(utest.SetReqValue(req, "Tag", "Default"))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "Quantity", 1))

	ctx.NoError(utest.SetReqValue(req, "PayMode", "Bandwidth"))

	ctx.NoError(utest.SetReqValue(req, "OperatorName", "Bgp"))

	ctx.NoError(utest.SetReqValue(req, "Name", "natgw-bgp"))

	ctx.NoError(utest.SetReqValue(req, "ChargeType", "Month"))

	ctx.NoError(utest.SetReqValue(req, "Bandwidth", 2))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return unetClient.AllocateEIP(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["EIPId"] = ctx.Must(utest.GetValue(resp, "EIPSet.0.EIPId"))
	ctx.Vars["EIP"] = ctx.Must(utest.GetValue(resp, "EIPSet.0.EIPAddr.0.IP"))
}

func testSet614DescribeFirewall05(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := unetClient.NewDescribeFirewallRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return unetClient.DescribeFirewall(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["FWId"] = ctx.Must(utest.GetValue(resp, "DataSet"))
}

func testSet614CreateNATGW06(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewCreateNATGWRequest()

	ctx.NoError(utest.SetReqValue(req, "VPCId", ctx.GetVar("VPCId")))

	ctx.NoError(utest.SetReqValue(req, "Tag", "Default"))

	ctx.NoError(utest.SetReqValue(req, "SubnetworkIds", ctx.GetVar("SubnetId")))

	ctx.NoError(utest.SetReqValue(req, "Remark", "bgp"))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "NATGWName", "natgw-bgp"))

	ctx.NoError(utest.SetReqValue(req, "IfOpen", 0))

	ctx.NoError(utest.SetReqValue(req, "FirewallId", ctx.Must(utest.SearchValue(ctx.GetVar("FWId"), "Type", "recommend web", "FWId"))))

	ctx.NoError(utest.SetReqValue(req, "EIPIds", ctx.GetVar("EIPId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.CreateNATGW(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    10,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet614DescribeEIP07(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := unetClient.NewDescribeEIPRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "EIPIds", ctx.GetVar("EIPId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return unetClient.DescribeEIP(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("EIPSet.0.Resource.ResourceType", "natgw", "str_eq"),
		},
		MaxRetries:    10,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["NATGWId"] = ctx.Must(utest.GetValue(resp, "EIPSet.0.Resource.ResourceID"))
}

func testSet614GetAvailableResourceForWhiteList08(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewGetAvailableResourceForWhiteListRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.GetAvailableResourceForWhiteList(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet614GetAvailableHostForWhiteList09(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := ivpcClient.NewGetAvailableHostForWhiteListRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ivpcClient.GetAvailableHostForWhiteList(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "GetAvailableHostForWhiteListResponse", "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 1 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet614AddWhiteListResource10(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewAddWhiteListResourceRequest()

	ctx.NoError(utest.SetReqValue(req, "ResourceIds", ctx.GetVar("UHostIds_s1")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.AddWhiteListResource(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet614DescribeWhiteListResource11(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewDescribeWhiteListResourceRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "NATGWIds", ctx.GetVar("NATGWId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.DescribeWhiteListResource(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet614DeleteWhiteListResource12(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewDeleteWhiteListResourceRequest()

	ctx.NoError(utest.SetReqValue(req, "ResourceIds", ctx.GetVar("UHostIds_s1")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.DeleteWhiteListResource(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet614DescribeWhiteList13(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := ivpcClient.NewDescribeWhiteListRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "NATGWIds", ctx.GetVar("NATGWId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ivpcClient.DescribeWhiteList(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet614EnableWhiteList14(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewEnableWhiteListRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	ctx.NoError(utest.SetReqValue(req, "IfOpen", 1))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.EnableWhiteList(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet614DeleteNATGW15(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewDeleteNATGWRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.DeleteNATGW(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet614ReleaseEIP16(ctx *utest.TestContext) {
	time.Sleep(time.Duration(5) * time.Second)

	req := unetClient.NewReleaseEIPRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "EIPId", ctx.GetVar("EIPId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return unetClient.ReleaseEIP(req)
		},
		Validators:    []utest.TestValidator{},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet614PoweroffUHostInstance17(ctx *utest.TestContext) {
	time.Sleep(time.Duration(5) * time.Second)

	req := uhostClient.NewPoweroffUHostInstanceRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "UHostId", ctx.GetVar("UHostIds_s1")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return uhostClient.PoweroffUHostInstance(req)
		},
		Validators:    []utest.TestValidator{},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet614TerminateUHostInstance18(ctx *utest.TestContext) {
	time.Sleep(time.Duration(60) * time.Second)

	req := uhostClient.NewTerminateUHostInstanceRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "UHostId", ctx.GetVar("UHostIds_s1")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return uhostClient.TerminateUHostInstance(req)
		},
		Validators:    []utest.TestValidator{},
		MaxRetries:    10,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet614DeleteSubnet19(ctx *utest.TestContext) {
	time.Sleep(time.Duration(5) * time.Second)

	req := vpcClient.NewDeleteSubnetRequest()

	ctx.NoError(utest.SetReqValue(req, "SubnetId", ctx.GetVar("SubnetId")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.DeleteSubnet(req)
		},
		Validators:    []utest.TestValidator{},
		MaxRetries:    10,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet614DeleteVPC20(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewDeleteVPCRequest()

	ctx.NoError(utest.SetReqValue(req, "VPCId", ctx.GetVar("VPCId")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.DeleteVPC(req)
		},
		Validators:    []utest.TestValidator{},
		MaxRetries:    10,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}
