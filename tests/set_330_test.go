// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/functions"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"

	"github.com/ucloud/ucloud-sdk-go/ucloud"
)

func TestSet330(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: 330,
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{

				"Region": "cn-bj2",
				"Zone":   "cn-bj2-02",
			}
		},
		Owners: []string{"caroline.yuan@ucloud.cn"},
		Title:  "单机式memcache（计价）",
		Steps: []*driver.Step{
			testStep330CreateUMemcacheGroup00,
			testStep330DescribeUMem01,
			testStep330DescribeUMemcachePrice02,
			testStep330DescribeOrderDetailInfo03,
			testStep330DescribeUMemcacheUpgradePrice04,
			testStep330ResizeUMemcacheGroup05,
			testStep330DescribeOrderDetailInfo06,
			testStep330GetResourceRenewPrice07,
			testStep330CreateRenew08,
			testStep330DescribeOrderDetailInfo09,
			testStep330DeleteUMem10,
		},
	})
}

var testStep330CreateUMemcacheGroup00 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CreateUMemcacheGroup")
		req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Size":       1,
			"Region":     step.Scenario.GetVar("Region"),
			"Quantity":   1,
			"Name":       "umem_charge",
			"ChargeType": "Month",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("group_id", step.Must(utils.GetValue(resp, "GroupId")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "创建memcache组",
	FastFail:      false,
}

var testStep330DescribeUMem01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMem")
		req.SetPayload(map[string]interface{}{
			"ResourceId": step.Scenario.GetVar("group_id"),
			"Region":     step.Scenario.GetVar("Region"),
			"Protocol":   "memcache",
			"Offset":     0,
			"Limit":      1000,
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("CreateTime", step.Must(utils.GetValue(resp, "DataSet.0.CreateTime")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取UMem列表",
	FastFail:      false,
}

var testStep330DescribeUMemcachePrice02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMemcachePrice")
		req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Size":       1,
			"Region":     step.Scenario.GetVar("Region"),
			"Quantity":   1,
			"ChargeType": "Month",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("GetPrice", step.Must(utils.GetValue(resp, "DataSet.0.Price")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取umemcache组价格",
	FastFail:      false,
}

var testStep330DescribeOrderDetailInfo03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeOrderDetailInfo")
		req.SetPayload(map[string]interface{}{
			"ResourceIds": []interface{}{
				step.Scenario.GetVar("group_id"),
			},
			"QueryAll": true,
			"OrderTypes": []interface{}{
				"OT_BUY",
			},
			"OrderStates": []interface{}{
				"OS_FINISHED",
			},
			"EndTime": step.Must(functions.GetTimestamp(10)),
			"ChargeTypes": []interface{}{
				"Month",
			},
			"BeginTime": step.Must(functions.Calculate("-", step.Must(functions.GetTimestamp(10)), 1200)),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("OrderInfos.0.Amount", step.Must(functions.Calculate("/", step.Scenario.GetVar("GetPrice"), 100)), "float_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取订单信息",
	FastFail:      false,
}

var testStep330DescribeUMemcacheUpgradePrice04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMemcacheUpgradePrice")
		req.SetPayload(map[string]interface{}{
			"Size":    2,
			"Region":  step.Scenario.GetVar("Region"),
			"GroupId": step.Scenario.GetVar("group_id"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("UpgradePrice", step.Must(utils.GetValue(resp, "Price")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取umemcache升级价格",
	FastFail:      false,
}

var testStep330ResizeUMemcacheGroup05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("ResizeUMemcacheGroup")
		req.SetPayload(map[string]interface{}{
			"Size":    2,
			"Region":  step.Scenario.GetVar("Region"),
			"GroupId": step.Scenario.GetVar("group_id"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "调整容量",
	FastFail:      false,
}

var testStep330DescribeOrderDetailInfo06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeOrderDetailInfo")
		req.SetPayload(map[string]interface{}{
			"ResourceIds": []interface{}{
				step.Scenario.GetVar("group_id"),
			},
			"QueryAll": true,
			"OrderTypes": []interface{}{
				"OT_BUY",
			},
			"OrderStates": []interface{}{
				"OS_FINISHED",
			},
			"EndTime": step.Must(functions.GetTimestamp(10)),
			"ChargeTypes": []interface{}{
				"Month",
			},
			"BeginTime": step.Must(functions.Calculate("-", step.Must(functions.GetTimestamp(10)), 1200)),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("OrderInfos.0.Amount", step.Must(functions.Calculate("/", step.Scenario.GetVar("GetPrice"), 100)), "float_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取订单信息",
	FastFail:      false,
}

var testStep330GetResourceRenewPrice07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("GetResourceRenewPrice")
		req.SetPayload(map[string]interface{}{
			"ResourceIds": []interface{}{
				step.Scenario.GetVar("group_id"),
			},
			"Quantity":   1,
			"ChargeType": "Month",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("ReNewPrice", step.Must(utils.GetValue(resp, "RenewPriceSet.0.Price")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取续费价格",
	FastFail:      false,
}

var testStep330CreateRenew08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CreateRenew")
		req.SetPayload(map[string]interface{}{
			"ResourceId": step.Scenario.GetVar("group_id"),
			"Quantity":   1,
			"ChargeType": "Month",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "创建单个续费订单",
	FastFail:      false,
}

var testStep330DescribeOrderDetailInfo09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeOrderDetailInfo")
		req.SetPayload(map[string]interface{}{
			"ResourceIds": []interface{}{
				step.Scenario.GetVar("group_id"),
			},
			"QueryAll": true,
			"OrderTypes": []interface{}{
				"OT_RENEW",
			},
			"OrderStates": []interface{}{
				"OS_FINISHED",
			},
			"EndTime": step.Must(functions.GetTimestamp(10)),
			"ChargeTypes": []interface{}{
				"Month",
			},
			"BeginTime": step.Must(functions.Calculate("-", step.Must(functions.GetTimestamp(10)), 1200)),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("OrderInfos.0.Amount", step.Scenario.GetVar("ReNewPrice"), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取订单信息",
	FastFail:      false,
}

var testStep330DeleteUMem10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DeleteUMem")
		req.SetPayload(map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"ResourceType": "single",
			"ResourceId":   step.Scenario.GetVar("group_id"),
			"Region":       step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "删除UMem资源",
	FastFail:      false,
}
