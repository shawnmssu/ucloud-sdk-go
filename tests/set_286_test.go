// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/functions"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"

	"github.com/ucloud/ucloud-sdk-go/ucloud"
)

func TestSet286(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: 286,
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"Region":         "cn-sh2",
				"Zone":           "cn-sh2-02",
				"UDiskType":      "DataDisk",
				"Size":           1,
				"UDataArkMode":   "No",
				"UDiskName":      "auto_udisk_noArk",
				"UDiskCloneName": "auto_udisk_noArk_Clone",
			}
		},
		Owners: []string{"chenoa.chen@ucloud.cn"},
		Title:  "UDisk-普通盘非方舟_02",
		Steps: []*driver.Step{
			testStep286DescribeUDiskPrice00,
			testStep286CheckUDiskAllowance01,
			testStep286CreateUDisk02,
			testStep286DescribeUDisk03,
			testStep286CloneUDisk04,
			testStep286DescribeUDiskUpgradePrice05,
			testStep286ResizeUDisk06,
			testStep286DescribeUDisk07,
			testStep286DescribeUDisk08,
			testStep286DeleteUDisk09,
			testStep286DescribeUDisk10,
			testStep286DeleteUDisk11,
			testStep286DescribeUDisk12,
		},
	})
}

var testStep286DescribeUDiskPrice00 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDiskPrice")
		req.SetPayload(map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"UDataArkMode": step.Scenario.GetVar("UDataArkMode"),
			"Size":         step.Scenario.GetVar("Size"),
			"Region":       step.Scenario.GetVar("Region"),
			"Quantity":     1,
			"DiskType":     step.Scenario.GetVar("UDiskType"),
			"ChargeType":   "Month",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取云硬盘价格",
	FastFail:      false,
}

var testStep286CheckUDiskAllowance01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CheckUDiskAllowance")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Size":   10,
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CheckUDiskAllowanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "检查UDisk资源余量",
	FastFail:      false,
}

var testStep286CreateUDisk02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CreateUDisk")
		req.SetPayload(map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"UDataArkMode": step.Scenario.GetVar("UDataArkMode"),
			"Tag":          "test",
			"Size":         step.Scenario.GetVar("Size"),
			"Region":       step.Scenario.GetVar("Region"),
			"Quantity":     0,
			"Name":         step.Scenario.GetVar("UDiskName"),
			"DiskType":     step.Scenario.GetVar("UDiskType"),
			"ChargeType":   "Month",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("udisk_noArk_id", step.Must(utils.GetValue(resp, "UDiskId.0")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建云硬盘",
	FastFail:      false,
}

var testStep286DescribeUDisk03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDisk")
		req.SetPayload(map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"UDiskId": step.Scenario.GetVar("udisk_noArk_id"),
			"Region":  step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Status", "Available", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Tag", "test", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取云硬盘列表",
	FastFail:      false,
}

var testStep286CloneUDisk04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CloneUDisk")
		req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"SourceId":   step.Scenario.GetVar("udisk_noArk_id"),
			"Region":     step.Scenario.GetVar("Region"),
			"Quantity":   0,
			"Name":       step.Scenario.GetVar("UDiskCloneName"),
			"ChargeType": "Month",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("udisk_noArk_id_clone", step.Must(utils.GetValue(resp, "UDiskId.0")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CloneUDiskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "克隆云硬盘",
	FastFail:      false,
}

var testStep286DescribeUDiskUpgradePrice05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDiskUpgradePrice")
		req.SetPayload(map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"UDataArkMode": step.Scenario.GetVar("UDataArkMode"),
			"SourceId":     step.Scenario.GetVar("udisk_noArk_id"),
			"Size":         step.Must(functions.Calculate("+", step.Scenario.GetVar("Size"), 1)),
			"Region":       step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取云硬盘升级价格",
	FastFail:      false,
}

var testStep286ResizeUDisk06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("ResizeUDisk")
		req.SetPayload(map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"UDiskId": step.Scenario.GetVar("udisk_noArk_id"),
			"Size":    step.Must(functions.Calculate("+", step.Scenario.GetVar("Size"), 1)),
			"Region":  step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(80) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "调整云硬盘",
	FastFail:      false,
}

var testStep286DescribeUDisk07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDisk")
		req.SetPayload(map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"UDiskId": step.Scenario.GetVar("udisk_noArk_id"),
			"Region":  step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Size", step.Must(functions.Calculate("+", step.Scenario.GetVar("Size"), 1)), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取云硬盘列表",
	FastFail:      false,
}

var testStep286DescribeUDisk08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDisk")
		req.SetPayload(map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"UDiskId": step.Scenario.GetVar("udisk_noArk_id_clone"),
			"Region":  step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDiskResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Status", "Available", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    40,
	RetryInterval: 3 * time.Second,
	Title:         "获取云硬盘列表",
	FastFail:      false,
}

var testStep286DeleteUDisk09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DeleteUDisk")
		req.SetPayload(map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"UDiskId": step.Scenario.GetVar("udisk_noArk_id"),
			"Region":  step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除云硬盘",
	FastFail:      false,
}

var testStep286DescribeUDisk10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDisk")
		req.SetPayload(map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"UDiskId": step.Scenario.GetVar("udisk_noArk_id"),
			"Region":  step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    20,
	RetryInterval: 3 * time.Second,
	Title:         "获取云硬盘列表",
	FastFail:      false,
}

var testStep286DeleteUDisk11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DeleteUDisk")
		req.SetPayload(map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"UDiskId": step.Scenario.GetVar("udisk_noArk_id_clone"),
			"Region":  step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteUDiskResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除云硬盘",
	FastFail:      false,
}

var testStep286DescribeUDisk12 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDisk")
		req.SetPayload(map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"UDiskId": step.Scenario.GetVar("udisk_noArk_id_clone"),
			"Region":  step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    20,
	RetryInterval: 3 * time.Second,
	Title:         "获取云硬盘列表",
	FastFail:      false,
}
