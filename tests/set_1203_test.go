// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"

	"github.com/ucloud/ucloud-sdk-go/ucloud"
)

func TestSet1203(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: 1203,
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"Region":   "cn-sh2",
				"Zone":     "cn-sh2-02",
				"Protocol": "redis",
				"Type":     "double",
				"Name":     "distributed_redis",
			}
		},
		Owners: []string{"caroline.yuan@ucloud.cn"},
		Title:  "DistributedRedis",
		Steps: []*driver.Step{
			testStep1203CheckUMemSpaceAllowance00,
			testStep1203CreateUMemSpace01,
			testStep1203DescribeUMem02,
			testStep1203ModifyUMemSpaceName03,
			testStep1203DescribeUMem04,
			testStep1203GetUMemSpaceState05,
			testStep1203ResizeUMemSpace06,
			testStep1203DescribeUMem07,
			testStep1203DeleteUMemSpace08,
			testStep1203DescribeUMem09,
		},
	})
}

var testStep1203CheckUMemSpaceAllowance00 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CheckUMemSpaceAllowance")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Size":   16,
			"Region": step.Scenario.GetVar("Region"),
			"Count":  1,
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CheckUMemSpaceAllowanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "检查分布式UMem剩余资源",
	FastFail:      false,
}

var testStep1203CreateUMemSpace01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CreateUMemSpace")
		req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Type":       step.Scenario.GetVar("Type"),
			"Size":       16,
			"Region":     step.Scenario.GetVar("Region"),
			"Quantity":   1,
			"Protocol":   step.Scenario.GetVar("Protocol"),
			"Name":       step.Scenario.GetVar("Name"),
			"ChargeType": "Month",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("Space_Id", step.Must(utils.GetValue(resp, "SpaceId")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "创建内存空间",
	FastFail:      false,
}

var testStep1203DescribeUMem02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMem")
		req.SetPayload(map[string]interface{}{
			"ResourceId": step.Scenario.GetVar("Space_Id"),
			"Region":     step.Scenario.GetVar("Region"),
			"Protocol":   step.Scenario.GetVar("Protocol"),
			"Offset":     0,
			"Limit":      1000,
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    30,
	RetryInterval: 10 * time.Second,
	Title:         "获取UMem列表",
	FastFail:      false,
}

var testStep1203ModifyUMemSpaceName03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("ModifyUMemSpaceName")
		req.SetPayload(map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"SpaceId": step.Scenario.GetVar("Space_Id"),
			"Region":  step.Scenario.GetVar("Region"),
			"Name":    "Rename_FBS",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ModifyUMemSpaceNameResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "修改名称",
	FastFail:      false,
}

var testStep1203DescribeUMem04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMem")
		req.SetPayload(map[string]interface{}{
			"ResourceId": step.Scenario.GetVar("Space_Id"),
			"Region":     step.Scenario.GetVar("Region"),
			"Protocol":   step.Scenario.GetVar("Protocol"),
			"Offset":     0,
			"Limit":      1000,
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取UMem列表",
	FastFail:      false,
}

var testStep1203GetUMemSpaceState05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("GetUMemSpaceState")
		req.SetPayload(map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"SpaceId": step.Scenario.GetVar("Space_Id"),
			"Region":  step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUMemSpaceStateResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取空间状态",
	FastFail:      false,
}

var testStep1203ResizeUMemSpace06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("ResizeUMemSpace")
		req.SetPayload(map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"SpaceId": step.Scenario.GetVar("Space_Id"),
			"Size":    17,
			"Region":  step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(20) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "调整容量",
	FastFail:      false,
}

var testStep1203DescribeUMem07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMem")
		req.SetPayload(map[string]interface{}{
			"ResourceId": step.Scenario.GetVar("Space_Id"),
			"Region":     step.Scenario.GetVar("Region"),
			"Protocol":   step.Scenario.GetVar("Protocol"),
			"Offset":     0,
			"Limit":      1000,
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    40,
	RetryInterval: 10 * time.Second,
	Title:         "获取UMem列表",
	FastFail:      false,
}

var testStep1203DeleteUMemSpace08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DeleteUMemSpace")
		req.SetPayload(map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"SpaceId": step.Scenario.GetVar("Space_Id"),
			"Region":  step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteUMemSpaceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 10 * time.Second,
	Title:         "删除空间",
	FastFail:      false,
}

var testStep1203DescribeUMem09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMem")
		req.SetPayload(map[string]interface{}{
			"ResourceId": step.Scenario.GetVar("Space_Id"),
			"Region":     step.Scenario.GetVar("Region"),
			"Protocol":   step.Scenario.GetVar("Protocol"),
			"Offset":     0,
			"Limit":      1000,
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUMemResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet", step.Scenario.GetVar("Space_Id"), "object_not_contains"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    30,
	RetryInterval: 10 * time.Second,
	Title:         "获取UMem列表",
	FastFail:      false,
}
