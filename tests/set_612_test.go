// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/internal/utest"
)

func TestSet612(t *testing.T) {
	t.Parallel()

	ctx := utest.NewTestContext()
	ctx.T = t
	ctx.Vars = map[string]interface{}{}

	ctx.SetVar("Region", "cn-sh2")
	ctx.SetVar("Zone", "cn-sh2-02")

	testSet612CreateVPC00(&ctx)
	testSet612CreateSubnet01(&ctx)
	testSet612AllocateEIP02(&ctx)
	testSet612DescribeFirewall03(&ctx)
	testSet612CreateNATGW04(&ctx)
	testSet612DescribeEIP05(&ctx)
	testSet612DescribeNATGW06(&ctx)
	testSet612UpdateNATGW07(&ctx)
	testSet612ListSubnetForNATGW08(&ctx)
	testSet612UpdateNATGWSubnet09(&ctx)
	testSet612DeleteNATGW10(&ctx)
	testSet612ReleaseEIP11(&ctx)
	testSet612DeleteSubnet12(&ctx)
	testSet612DeleteVPC13(&ctx)
}

func testSet612CreateVPC00(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := vpcClient.NewCreateVPCRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "Network", "172.16.0.0/12"))

	ctx.NoError(utest.SetReqValue(req, "Name", "vpc-natgw-bgp"))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.CreateVPC(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["VPCId"] = ctx.Must(utest.GetValue(resp, "VPCId"))
}

func testSet612CreateSubnet01(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewCreateSubnetRequest()

	ctx.NoError(utest.SetReqValue(req, "VPCId", ctx.GetVar("VPCId")))

	ctx.NoError(utest.SetReqValue(req, "SubnetName", "natgw-s1-bgp"))

	ctx.NoError(utest.SetReqValue(req, "Subnet", "172.16.0.0"))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "Netmask", 21))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.CreateSubnet(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["SubnetId"] = ctx.Must(utest.GetValue(resp, "SubnetId"))
}

func testSet612AllocateEIP02(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := unetClient.NewAllocateEIPRequest()

	ctx.NoError(utest.SetReqValue(req, "Tag", "Default"))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "Quantity", 1))

	ctx.NoError(utest.SetReqValue(req, "PayMode", "Bandwidth"))

	ctx.NoError(utest.SetReqValue(req, "OperatorName", "Bgp"))

	ctx.NoError(utest.SetReqValue(req, "Name", "natgw-eip-bgp"))

	ctx.NoError(utest.SetReqValue(req, "ChargeType", "Month"))

	ctx.NoError(utest.SetReqValue(req, "Bandwidth", 2))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return unetClient.AllocateEIP(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["EIPId"] = ctx.Must(utest.GetValue(resp, "EIPSet.0.EIPId"))
}

func testSet612DescribeFirewall03(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := unetClient.NewDescribeFirewallRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return unetClient.DescribeFirewall(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["FWId"] = ctx.Must(utest.GetValue(resp, "DataSet"))
}

func testSet612CreateNATGW04(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewCreateNATGWRequest()

	ctx.NoError(utest.SetReqValue(req, "VPCId", ctx.GetVar("VPCId")))

	ctx.NoError(utest.SetReqValue(req, "Tag", "Default"))

	ctx.NoError(utest.SetReqValue(req, "SubnetworkIds", ctx.GetVar("SubnetId")))

	ctx.NoError(utest.SetReqValue(req, "Remark", "bgp"))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "NATGWName", "natgw-bgp"))

	ctx.NoError(utest.SetReqValue(req, "FirewallId", ctx.Must(utest.SearchValue(ctx.GetVar("FWId"), "Type", "recommend web", "FWId"))))

	ctx.NoError(utest.SetReqValue(req, "EIPIds", ctx.GetVar("EIPId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.CreateNATGW(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 60 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet612DescribeEIP05(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := unetClient.NewDescribeEIPRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "EIPIds", ctx.GetVar("EIPId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return unetClient.DescribeEIP(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("EIPSet.0.Resource.ResourceType", "natgw", "str_eq"),
		},
		MaxRetries:    10,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["NATGWId"] = ctx.Must(utest.GetValue(resp, "EIPSet.0.Resource.ResourceID"))
}

func testSet612DescribeNATGW06(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewDescribeNATGWRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "Offset", 0))

	ctx.NoError(utest.SetReqValue(req, "NATGWIds", ctx.GetVar("NATGWId")))

	ctx.NoError(utest.SetReqValue(req, "Limit", 60))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.DescribeNATGW(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet612UpdateNATGW07(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := pvpcClient.NewUpdateNATGWRequest()

	ctx.NoError(utest.SetReqValue(req, "Tag", "Default"))

	ctx.NoError(utest.SetReqValue(req, "Remark", "bgp-gai"))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "NATGWName", "natgw-bgp-gai"))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return pvpcClient.UpdateNATGW(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet612ListSubnetForNATGW08(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewListSubnetForNATGWRequest()

	ctx.NoError(utest.SetReqValue(req, "VPCId", ctx.GetVar("VPCId")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.ListSubnetForNATGW(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet612UpdateNATGWSubnet09(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewUpdateNATGWSubnetRequest()

	ctx.NoError(utest.SetReqValue(req, "SubnetworkIds", ctx.GetVar("SubnetId")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.UpdateNATGWSubnet(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet612DeleteNATGW10(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewDeleteNATGWRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "NATGWId", ctx.GetVar("NATGWId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.DeleteNATGW(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet612ReleaseEIP11(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := unetClient.NewReleaseEIPRequest()

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "EIPId", ctx.GetVar("EIPId")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return unetClient.ReleaseEIP(req)
		},
		Validators:    []utest.TestValidator{},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet612DeleteSubnet12(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewDeleteSubnetRequest()

	ctx.NoError(utest.SetReqValue(req, "SubnetId", ctx.GetVar("SubnetId")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.DeleteSubnet(req)
		},
		Validators:    []utest.TestValidator{},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet612DeleteVPC13(ctx *utest.TestContext) {
	time.Sleep(time.Duration(3) * time.Second)

	req := vpcClient.NewDeleteVPCRequest()

	ctx.NoError(utest.SetReqValue(req, "VPCId", ctx.GetVar("VPCId")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return vpcClient.DeleteVPC(req)
		},
		Validators:    []utest.TestValidator{},
		MaxRetries:    3,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}
