// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/functions"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"

	"github.com/ucloud/ucloud-sdk-go/ucloud"
)

func TestSet489(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: 489,
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{

				"Region":       "cn-bj2",
				"Zone":         "cn-bj2-02",
				"DBTypeId":     "mysql-5.6",
				"InstanceMode": "HA",
				"InstanceType": "SATA_SSD",
				"Port":         3306,
				"MemoryLimit":  1000,
				"DiskSpace":    20,
				"DBName":       "auto_hassd_",
				"BackupName":   "handbf_test_02",
				"UseSSD":       true,
			}
		},
		Owners: []string{"xiangyu.wang@ucloud.cn"},
		Title:  "Mysql_高可用类型SSD机型_mysql 5.6_02",
		Steps: []*driver.Step{
			testStep489DescribeUDBType00,
			testStep489DescribeUDBParamGroup01,
			testStep489DescribeUDBInstancePrice02,
			testStep489CheckUDBInstanceAllowance03,
			testStep489CreateUDBInstance04,
			testStep489DescribeUDBInstance05,
			testStep489DescribeUDBInstanceState06,
			testStep489UpdateUDBInstanceBackupStrategy07,
			testStep489EditUDBBackupBlacklist08,
			testStep489DescribeUDBBackupBlacklist09,
			testStep489BackupUDBInstance10,
			testStep489DescribeUDBBackup11,
			testStep489DescribeUDBInstanceBackupState12,
			testStep489CheckUDBInstanceAllowance13,
			testStep489DescribeUDBInstanceBackupURL14,
			testStep489CheckUDBInstanceAllowance15,
			testStep489CreateUDBInstance16,
			testStep489DescribeUDBInstanceState17,
			testStep489DescribeUDBInstance18,
			testStep489StopUDBInstance19,
			testStep489DescribeUDBInstance20,
			testStep489FetchUDBInstanceEarliestRecoverTime21,
			testStep489CheckUDBInstanceAllowance22,
			testStep489CreateUDBInstanceByRecovery23,
			testStep489DescribeUDBInstanceState24,
			testStep489DescribeUDBInstance25,
			testStep489StopUDBInstance26,
			testStep489DescribeUDBInstance27,
			testStep489DeleteUDBBackup28,
			testStep489StopUDBInstance29,
			testStep489DescribeUDBInstance30,
			testStep489DeleteUDBInstance31,
			testStep489DeleteUDBInstance32,
			testStep489DeleteUDBInstance33,
		},
	})
}

var testStep489DescribeUDBType00 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBType")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取云数据库支持类型",
	FastFail:      false,
}

var testStep489DescribeUDBParamGroup01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBParamGroup")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"Offset": 0,
			"Limit":  100,
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("DataSet_paramGroup", step.Must(utils.GetValue(resp, "DataSet")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取参数信息",
	FastFail:      false,
}

var testStep489DescribeUDBInstancePrice02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstancePrice")
		req.SetPayload(map[string]interface{}{
			"Zone":        step.Scenario.GetVar("Zone"),
			"Region":      step.Scenario.GetVar("Region"),
			"MemoryLimit": step.Scenario.GetVar("MemoryLimit"),
			"DiskSpace":   step.Scenario.GetVar("DiskSpace"),
			"DBTypeId":    step.Scenario.GetVar("DBTypeId"),
			"Count":       1,
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取云数据库价格",
	FastFail:      false,
}

var testStep489CheckUDBInstanceAllowance03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CheckUDBInstanceAllowance")
		req.SetPayload(map[string]interface{}{
			"Zone":        step.Scenario.GetVar("Zone"),
			"UseSSD":      step.Scenario.GetVar("UseSSD"),
			"Region":      step.Scenario.GetVar("Region"),
			"MemoryLimit": step.Scenario.GetVar("MemoryLimit"),
			"DiskSpace":   step.Scenario.GetVar("DiskSpace"),
			"Count":       1,
			"ClassType":   "SQL",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "核查UDB资源余量",
	FastFail:      false,
}

var testStep489CreateUDBInstance04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CreateUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":          step.Scenario.GetVar("Zone"),
			"Region":        step.Scenario.GetVar("Region"),
			"Quantity":      0,
			"Port":          step.Scenario.GetVar("Port"),
			"ParamGroupId":  step.Must(functions.SearchValue(step.Scenario.GetVar("DataSet_paramGroup"), "DBTypeId", step.Scenario.GetVar("DBTypeId"), "GroupId")),
			"Name":          step.Must(functions.Concat(step.Scenario.GetVar("DBName"), step.Scenario.GetVar("DBTypeId"))),
			"MemoryLimit":   step.Scenario.GetVar("MemoryLimit"),
			"InstanceType":  step.Scenario.GetVar("InstanceType"),
			"InstanceMode":  step.Scenario.GetVar("InstanceMode"),
			"DiskSpace":     step.Scenario.GetVar("DiskSpace"),
			"DBTypeId":      step.Scenario.GetVar("DBTypeId"),
			"ChargeType":    "Month",
			"AdminPassword": "guanliyuanmima",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("DBId", step.Must(utils.GetValue(resp, "DBId")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建数据库",
	FastFail:      true,
}

var testStep489DescribeUDBInstance05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"Region":    step.Scenario.GetVar("Region"),
			"Offset":    0,
			"Limit":     100,
			"DBId":      step.Scenario.GetVar("DBId"),
			"ClassType": "sql",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Name ", step.Must(functions.Concat(step.Scenario.GetVar("DBName"), step.Scenario.GetVar("DBTypeId"))), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.DBTypeId", step.Scenario.GetVar("DBTypeId"), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取云数据库信息",
	FastFail:      false,
}

var testStep489DescribeUDBInstanceState06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstanceState")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    50,
	RetryInterval: 10 * time.Second,
	Title:         "获取云数据库状态",
	FastFail:      false,
}

var testStep489UpdateUDBInstanceBackupStrategy07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("UpdateUDBInstanceBackupStrategy")
		req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Region":     step.Scenario.GetVar("Region"),
			"DBId":       step.Scenario.GetVar("DBId"),
			"BackupTime": 13,
			"BackupDate": 1111110,
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "修改UDB自动备份策略",
	FastFail:      false,
}

var testStep489EditUDBBackupBlacklist08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("EditUDBBackupBlacklist")
		req.SetPayload(map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"Region":    step.Scenario.GetVar("Region"),
			"DBId":      step.Scenario.GetVar("DBId"),
			"Blacklist": "test.%",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "编辑备份黑名单",
	FastFail:      false,
}

var testStep489DescribeUDBBackupBlacklist09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBBackupBlacklist")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Blacklist", "test.%", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    20,
	RetryInterval: 3 * time.Second,
	Title:         "获取备份黑名单",
	FastFail:      false,
}

var testStep489BackupUDBInstance10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("BackupUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"UseBlacklist": true,
			"Region":       step.Scenario.GetVar("Region"),
			"DBId":         step.Scenario.GetVar("DBId"),
			"BackupName":   step.Scenario.GetVar("BackupName"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(15) * time.Second,
	MaxRetries:    2,
	RetryInterval: 1 * time.Second,
	Title:         "备份云数据库",
	FastFail:      false,
}

var testStep489DescribeUDBBackup11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBBackup")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"Offset": 0,
			"Limit":  100,
			"DBId":   step.Scenario.GetVar("DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("BackupId", step.Must(utils.GetValue(resp, "DataSet.0.BackupId")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Success", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    50,
	RetryInterval: 3 * time.Second,
	Title:         "获取备份列表",
	FastFail:      false,
}

var testStep489DescribeUDBInstanceBackupState12 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstanceBackupState")
		req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Region":   step.Scenario.GetVar("Region"),
			"BackupId": step.Scenario.GetVar("BackupId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("State", "Success", "str_eq"),
			validation.Builtins.NewValidator("BackupSize", 0, "ne"),
			validation.Builtins.NewValidator("BackupEndTime", 0, "ne"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    20,
	RetryInterval: 3 * time.Second,
	Title:         "获取实例备份状态",
	FastFail:      false,
}

var testStep489CheckUDBInstanceAllowance13 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CheckUDBInstanceAllowance")
		req.SetPayload(map[string]interface{}{
			"Zone":        step.Scenario.GetVar("Zone"),
			"UseSSD":      step.Scenario.GetVar("UseSSD"),
			"Region":      step.Scenario.GetVar("Region"),
			"MemoryLimit": step.Scenario.GetVar("MemoryLimit"),
			"DiskSpace":   step.Scenario.GetVar("DiskSpace"),
			"Count":       1,
			"ClassType":   "SQL",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "核查UDB资源余量",
	FastFail:      false,
}

var testStep489DescribeUDBInstanceBackupURL14 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstanceBackupURL")
		req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Region":   step.Scenario.GetVar("Region"),
			"DBId":     step.Scenario.GetVar("DBId"),
			"BackupId": step.Scenario.GetVar("BackupId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("BackupPath", "http://", "contains"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取UDB备份下载地址",
	FastFail:      false,
}

var testStep489CheckUDBInstanceAllowance15 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CheckUDBInstanceAllowance")
		req.SetPayload(map[string]interface{}{
			"Zone":        step.Scenario.GetVar("Zone"),
			"UseSSD":      step.Scenario.GetVar("UseSSD"),
			"Region":      step.Scenario.GetVar("Region"),
			"MemoryLimit": step.Scenario.GetVar("MemoryLimit"),
			"DiskSpace":   step.Scenario.GetVar("DiskSpace"),
			"Count":       1,
			"ClassType":   "SQL",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "核查UDB资源余量",
	FastFail:      false,
}

var testStep489CreateUDBInstance16 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CreateUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":          step.Scenario.GetVar("Zone"),
			"Region":        step.Scenario.GetVar("Region"),
			"Quantity":      0,
			"Port":          3306,
			"ParamGroupId":  step.Must(functions.SearchValue(step.Scenario.GetVar("DataSet_paramGroup"), "DBTypeId", "mysql-5.6", "GroupId")),
			"Name":          "frombf-hassd-56",
			"MemoryLimit":   step.Scenario.GetVar("MemoryLimit"),
			"InstanceType":  step.Scenario.GetVar("InstanceType"),
			"InstanceMode":  step.Scenario.GetVar("InstanceMode"),
			"DiskSpace":     step.Scenario.GetVar("DiskSpace"),
			"DBTypeId":      "mysql-5.6",
			"ChargeType":    "Month",
			"BackupId":      step.Scenario.GetVar("BackupId"),
			"AdminPassword": "guanliyuanmima",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("DBId_frombf_56", step.Must(utils.GetValue(resp, "DBId")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "创建数据库",
	FastFail:      false,
}

var testStep489DescribeUDBInstanceState17 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstanceState")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId_frombf_56"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    100,
	RetryInterval: 3 * time.Second,
	Title:         "获取云数据库状态",
	FastFail:      true,
}

var testStep489DescribeUDBInstance18 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"Region":    step.Scenario.GetVar("Region"),
			"Offset":    0,
			"Limit":     100,
			"DBId":      step.Scenario.GetVar("DBId_frombf_56"),
			"ClassType": "sql",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDBInstanceResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(3) * time.Second,
	MaxRetries:    100,
	RetryInterval: 5 * time.Second,
	Title:         "获取云数据库信息",
	FastFail:      false,
}

var testStep489StopUDBInstance19 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("StopUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId_frombf_56"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "StopUDBInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    2,
	RetryInterval: 1 * time.Second,
	Title:         "关闭云数据库",
	FastFail:      false,
}

var testStep489DescribeUDBInstance20 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId_frombf_56"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDBInstanceResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Shutoff", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    20,
	RetryInterval: 3 * time.Second,
	Title:         "获取云数据库信息",
	FastFail:      false,
}

var testStep489FetchUDBInstanceEarliestRecoverTime21 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("FetchUDBInstanceEarliestRecoverTime")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("EarliestTime", step.Must(utils.GetValue(resp, "EarliestTime")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("EarliestTime", 0, "ne"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    20,
	RetryInterval: 3 * time.Second,
	Title:         "获取最早可回档时间",
	FastFail:      false,
}

var testStep489CheckUDBInstanceAllowance22 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CheckUDBInstanceAllowance")
		req.SetPayload(map[string]interface{}{
			"Zone":        step.Scenario.GetVar("Zone"),
			"UseSSD":      step.Scenario.GetVar("UseSSD"),
			"Region":      step.Scenario.GetVar("Region"),
			"MemoryLimit": step.Scenario.GetVar("MemoryLimit"),
			"DiskSpace":   step.Scenario.GetVar("DiskSpace"),
			"Count":       1,
			"ClassType":   "sql",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "核查UDB资源余量",
	FastFail:      false,
}

var testStep489CreateUDBInstanceByRecovery23 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CreateUDBInstanceByRecovery")
		req.SetPayload(map[string]interface{}{
			"Zone":         step.Scenario.GetVar("Zone"),
			"SrcDBId":      step.Scenario.GetVar("DBId"),
			"Region":       step.Scenario.GetVar("Region"),
			"RecoveryTime": step.Scenario.GetVar("EarliestTime"),
			"Quantity":     0,
			"Name":         "56-hd-frombf",
			"ChargeType":   "Month",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("HD_DBId", step.Must(utils.GetValue(resp, "DBId")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(5) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "将新建的db恢复到指定db某个指定时间点",
	FastFail:      false,
}

var testStep489DescribeUDBInstanceState24 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstanceState")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("HD_DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    100,
	RetryInterval: 3 * time.Second,
	Title:         "获取云数据库状态",
	FastFail:      false,
}

var testStep489DescribeUDBInstance25 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"Region":    step.Scenario.GetVar("Region"),
			"Offset":    0,
			"Limit":     100,
			"DBId":      step.Scenario.GetVar("HD_DBId"),
			"ClassType": "sql",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDBInstanceResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(3) * time.Second,
	MaxRetries:    100,
	RetryInterval: 5 * time.Second,
	Title:         "获取云数据库信息",
	FastFail:      false,
}

var testStep489StopUDBInstance26 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("StopUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("HD_DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "StopUDBInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "关闭云数据库",
	FastFail:      false,
}

var testStep489DescribeUDBInstance27 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("HD_DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDBInstanceResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Shutoff", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    20,
	RetryInterval: 3 * time.Second,
	Title:         "获取云数据库信息",
	FastFail:      false,
}

var testStep489DeleteUDBBackup28 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DeleteUDBBackup")
		req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Region":   step.Scenario.GetVar("Region"),
			"BackupId": step.Scenario.GetVar("BackupId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "删除备份",
	FastFail:      false,
}

var testStep489StopUDBInstance29 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("StopUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "StopUDBInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "关闭云数据库",
	FastFail:      false,
}

var testStep489DescribeUDBInstance30 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDBInstanceResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Shutoff", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    20,
	RetryInterval: 3 * time.Second,
	Title:         "获取云数据库信息",
	FastFail:      false,
}

var testStep489DeleteUDBInstance31 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DeleteUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId_frombf_56"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除云数据库",
	FastFail:      false,
}

var testStep489DeleteUDBInstance32 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DeleteUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("HD_DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除云数据库",
	FastFail:      false,
}

var testStep489DeleteUDBInstance33 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DeleteUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除云数据库",
	FastFail:      false,
}
