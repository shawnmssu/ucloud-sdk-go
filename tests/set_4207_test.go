// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/internal/utest"
)

func TestSet4207(t *testing.T) {
	t.Skip()
	t.Parallel()

	ctx := utest.NewTestContext()
	ctx.T = t
	ctx.Vars = map[string]interface{}{}

	ctx.SetVar("Region", "cn")
	ctx.SetVar("Zone", "zone-01")

	ctx.SetVar("EndTime", ctx.Must(utest.GetTimestamp(10)))
	ctx.SetVar("BeginTime", ctx.Must(utest.Calculate("-", ctx.Must(utest.GetTimestamp("10")), 3600)))
	ctx.SetVar("VPCID", "vpc-5Vgr9tP8A")
	ctx.SetVar("SubnetID", "subnet-5Vgr9tP8A")
	ctx.SetVar("SGID", "sg-5Vgr9tP8A")

	testSet4207GetVMInstancePrice02(&ctx)
	testSet4207CreateVMInstance03(&ctx)
	testSet4207DescribeVMInstance04(&ctx)
	testSet4207DescribeMetric05(&ctx)
	testSet4207StopVMInstance06(&ctx)
	testSet4207DescribeVMInstance07(&ctx)
	testSet4207StartVMInstance08(&ctx)
	testSet4207DescribeVMInstance09(&ctx)
	testSet4207GetEIPPrice10(&ctx)
	testSet4207AllocateEIP11(&ctx)
	testSet4207DescribeEIP12(&ctx)
	testSet4207BindEIP13(&ctx)
	testSet4207DescribeEIP14(&ctx)
	testSet4207UnBindEIP15(&ctx)
	testSet4207DescribeEIP16(&ctx)
	testSet4207ReleaseEIP17(&ctx)
	testSet4207GetDiskPrice18(&ctx)
	testSet4207CreateDisk19(&ctx)
	testSet4207DescribeDisk20(&ctx)
	testSet4207AttachDisk21(&ctx)
	testSet4207DescribeDisk22(&ctx)
	testSet4207DetachDisk23(&ctx)
	testSet4207DescribeDisk24(&ctx)
	testSet4207DeleteDisk25(&ctx)
	testSet4207StopVMInstance26(&ctx)
	testSet4207DescribeVMInstance27(&ctx)
	testSet4207DeleteVMInstance28(&ctx)
}

// func testSet4207DescribeVPC00(ctx *utest.TestContext) {
// 	time.Sleep(time.Duration(0) * time.Second)

// 	req := vpcClient.NewDescribeVPCRequest()

// 	ctx.NoError(utest.SetReqValue(req, "Offset", 0))

// 	ctx.NoError(utest.SetReqValue(req, "Limit", 10))

// 	ctx.NoError(utest.SetReqValue(req, "AccountID", 0))

// 	testCase := utest.TestCase{
// 		Invoker: func() (interface{}, error) {
// 			return vpcClient.DescribeVPC(req)
// 		},
// 		Validators: []utest.TestValidator{
// 			ctx.NewValidator("RetCode", 0, "str_eq"),
// 			ctx.NewValidator("Action", "DescribeVPCResponse", "str_eq"),
// 		},
// 		MaxRetries:    3,
// 		RetryInterval: 1 * time.Second,
// 		T:             ctx.T,
// 	}

// 	resp, err := testCase.Run()
// 	if resp == nil || err != nil {

// 		ctx.T.Error(err)

// 	}

// 	ctx.Vars["VPCID"] = ctx.Must(utest.GetValue(resp, "Infos.0.VPCID"))
// 	ctx.Vars["SubnetID"] = ctx.Must(utest.GetValue(resp, "Infos.0.SubnetInfos.0.SubnetID"))
// }

// func testSet4207DescribeSecurityGroup01(ctx *utest.TestContext) {
// 	time.Sleep(time.Duration(0) * time.Second)

// 	req := iunetClient.NewDescribeSecurityGroupRequest()

// 	ctx.NoError(utest.SetReqValue(req, "needPoll", true))

// 	ctx.NoError(utest.SetReqValue(req, "Offset", 0))

// 	ctx.NoError(utest.SetReqValue(req, "Limit", 10))

// 	testCase := utest.TestCase{
// 		Invoker: func() (interface{}, error) {
// 			return iunetClient.DescribeSecurityGroup(req)
// 		},
// 		Validators: []utest.TestValidator{
// 			ctx.NewValidator("RetCode", 0, "str_eq"),
// 			ctx.NewValidator("Action", "DescribeSecurityGroupResponse", "str_eq"),
// 		},
// 		MaxRetries:    3,
// 		RetryInterval: 1 * time.Second,
// 		T:             ctx.T,
// 	}

// 	resp, err := testCase.Run()
// 	if resp == nil || err != nil {

// 		ctx.T.Error(err)

// 	}

// 	ctx.Vars["SGID"] = ctx.Must(utest.GetValue(resp, "Infos.0.SGID"))
// }

func testSet4207GetVMInstancePrice02(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewGetVMInstancePriceRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "VMType", "Normal"))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "OSType", "Linux"))

	ctx.NoError(utest.SetReqValue(req, "Memory", 2048))

	ctx.NoError(utest.SetReqValue(req, "ImageID", "cn-image-centos-76A"))

	ctx.NoError(utest.SetReqValue(req, "DataDiskSpace", 10))

	ctx.NoError(utest.SetReqValue(req, "DataDiskSetType", "Normal"))

	ctx.NoError(utest.SetReqValue(req, "ChargeType", "Month"))

	ctx.NoError(utest.SetReqValue(req, "CPU", 1))

	ctx.NoError(utest.SetReqValue(req, "BootDiskSetType", "Normal"))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.GetVMInstancePrice(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "GetVMInstancePriceResponse", "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 1 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet4207CreateVMInstance03(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewCreateVMInstanceRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "WANSGID", ctx.GetVar("SGID")))

	ctx.NoError(utest.SetReqValue(req, "VPCID", ctx.GetVar("VPCID")))

	ctx.NoError(utest.SetReqValue(req, "VMType", "Normal"))

	ctx.NoError(utest.SetReqValue(req, "SubnetID", ctx.GetVar("SubnetID")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "Quantity", 1))

	ctx.NoError(utest.SetReqValue(req, "Password", "ucloud.cn"))

	ctx.NoError(utest.SetReqValue(req, "Name", "sdk-test"))

	ctx.NoError(utest.SetReqValue(req, "Memory", 2048))

	ctx.NoError(utest.SetReqValue(req, "ImageID", "cn-image-centos-76A"))

	ctx.NoError(utest.SetReqValue(req, "DataDiskSetType", "SSD"))

	ctx.NoError(utest.SetReqValue(req, "DataDiskSpace", 0))

	ctx.NoError(utest.SetReqValue(req, "ChargeType", "Month"))

	ctx.NoError(utest.SetReqValue(req, "CPU", 1))

	ctx.NoError(utest.SetReqValue(req, "BootDiskSetType", "SSD"))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.CreateVMInstance(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "CreateVMInstanceResponse", "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 1 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["VMID"] = ctx.Must(utest.GetValue(resp, "VMID"))
}

func testSet4207DescribeVMInstance04(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewDescribeVMInstanceRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "VMIDs", ctx.GetVar("VMID")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.DescribeVMInstance(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "DescribeVMInstanceResponse", "str_eq"),
			ctx.NewValidator("Infos.0.State", "Running", "str_eq"),
		},
		MaxRetries:    300,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet4207DescribeMetric05(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewDescribeMetricRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "ResourceID", ctx.GetVar("VMID")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "MetricName", "DiskReadOps"))

	ctx.NoError(utest.SetReqValue(req, "EndTime", ctx.GetVar("EndTime")))

	ctx.NoError(utest.SetReqValue(req, "BeginTime", ctx.GetVar("BeginTime")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.DescribeMetric(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "DescribeMetricResponse", "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 1 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet4207StopVMInstance06(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewStopVMInstanceRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "VMID", ctx.GetVar("VMID")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.StopVMInstance(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "StopVMInstanceResponse", "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 1 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet4207DescribeVMInstance07(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewDescribeVMInstanceRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "VMIDs", ctx.GetVar("VMID")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.DescribeVMInstance(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "DescribeVMInstanceResponse", "str_eq"),
			ctx.NewValidator("Infos.0.State", "Stopped", "str_eq"),
		},
		MaxRetries:    300,
		RetryInterval: 1 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet4207StartVMInstance08(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewStartVMInstanceRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "VMID", ctx.GetVar("VMID")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.StartVMInstance(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "StartVMInstanceResponse", "str_eq"),
		},
		MaxRetries:    30,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet4207DescribeVMInstance09(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewDescribeVMInstanceRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "VMIDs", ctx.GetVar("VMID")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.DescribeVMInstance(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "DescribeVMInstanceResponse", "str_eq"),
			ctx.NewValidator("Infos.0.State", "Running", "str_eq"),
		},
		MaxRetries:    30,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet4207GetEIPPrice10(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewGetEIPPriceRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "OpertatorName", "Bgp"))

	ctx.NoError(utest.SetReqValue(req, "ChargeType", "Month"))

	ctx.NoError(utest.SetReqValue(req, "Bandwidth", 1))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.GetEIPPrice(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "GetEIPPriceResponse", "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 1 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet4207AllocateEIP11(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewAllocateEIPRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "OperatorName", "Bgp"))

	ctx.NoError(utest.SetReqValue(req, "Name", "stackeip"))

	ctx.NoError(utest.SetReqValue(req, "ChargeType", "Month"))

	ctx.NoError(utest.SetReqValue(req, "Bandwidth", 1))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.AllocateEIP(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "AllocateEIPResponse", "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 1 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["EIPID"] = ctx.Must(utest.GetValue(resp, "EIPID"))
}

func testSet4207DescribeEIP12(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewDescribeEIPRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "EIPIDs", ctx.GetVar("EIPID")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.DescribeEIP(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "DescribeEIPResponse", "str_eq"),
			ctx.NewValidator("Infos.0.Status", "Free", "str_eq"),
		},
		MaxRetries:    30,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet4207BindEIP13(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewBindEIPRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "ResourceType", "VM"))

	ctx.NoError(utest.SetReqValue(req, "ResourceID", ctx.GetVar("VMID")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "EIPID", ctx.GetVar("EIPID")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.BindEIP(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "BindEIPResponse", "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 1 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet4207DescribeEIP14(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewDescribeEIPRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "EIPIDs", ctx.GetVar("EIPID")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.DescribeEIP(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "DescribeEIPResponse", "str_eq"),
			ctx.NewValidator("Infos.0.Status", "Bound", "str_eq"),
		},
		MaxRetries:    30,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet4207UnBindEIP15(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewUnBindEIPRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "ResourceType", "VM"))

	ctx.NoError(utest.SetReqValue(req, "ResourceID", ctx.GetVar("VMID")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "EIPID", ctx.GetVar("EIPID")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.UnBindEIP(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "UnBindEIPResponse", "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 1 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet4207DescribeEIP16(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewDescribeEIPRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "EIPIDs", ctx.GetVar("EIPID")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.DescribeEIP(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "DescribeEIPResponse", "str_eq"),
			ctx.NewValidator("Infos.0.Status", "Free", "str_eq"),
		},
		MaxRetries:    30,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet4207ReleaseEIP17(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewReleaseEIPRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "EIPID", ctx.GetVar("EIPID")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.ReleaseEIP(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "ReleaseEIPResponse", "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 1 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet4207GetDiskPrice18(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewGetDiskPriceRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "SetType", "Normal"))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "DiskSpace", 10))

	ctx.NoError(utest.SetReqValue(req, "ChargeType", "Month"))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.GetDiskPrice(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "GetDiskPriceResponse", "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 1 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet4207CreateDisk19(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewCreateDiskRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "SetType", "Normal"))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "Name", "stackdisk"))

	ctx.NoError(utest.SetReqValue(req, "DiskSpace", 10))

	ctx.NoError(utest.SetReqValue(req, "ChargeType", "Month"))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.CreateDisk(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "CreateDiskResponse", "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 1 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

	ctx.Vars["DiskID"] = ctx.Must(utest.GetValue(resp, "DiskID"))
}

func testSet4207DescribeDisk20(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewDescribeDiskRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "DiskIDs", ctx.GetVar("DiskID")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.DescribeDisk(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "DescribeDiskResponse", "str_eq"),
			ctx.NewValidator("Infos.0.DiskStatus", "Unbound", "str_eq"),
		},
		MaxRetries:    30,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet4207AttachDisk21(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewAttachDiskRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "ResourceType", "VM"))

	ctx.NoError(utest.SetReqValue(req, "ResourceID", ctx.GetVar("VMID")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "DiskID", ctx.GetVar("DiskID")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.AttachDisk(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "AttachDiskResponse", "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 1 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet4207DescribeDisk22(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewDescribeDiskRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "DiskIDs", ctx.GetVar("DiskID")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.DescribeDisk(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "DescribeDiskResponse", "str_eq"),
			ctx.NewValidator("Infos.0.DiskStatus", "Bound", "str_eq"),
		},
		MaxRetries:    30,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet4207DetachDisk23(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewDetachDiskRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "ResourceID", ctx.GetVar("VMID")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "DiskID", ctx.GetVar("DiskID")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.DetachDisk(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "DetachDiskResponse", "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 1 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet4207DescribeDisk24(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewDescribeDiskRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "DiskIDs", ctx.GetVar("DiskID")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.DescribeDisk(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "DescribeDiskResponse", "str_eq"),
			ctx.NewValidator("Infos.0.DiskStatus", "Unbound", "str_eq"),
		},
		MaxRetries:    30,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet4207DeleteDisk25(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewDeleteDiskRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	ctx.NoError(utest.SetReqValue(req, "DiskID", ctx.GetVar("DiskID")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.DeleteDisk(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "DeleteDiskResponse", "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 1 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet4207StopVMInstance26(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewStopVMInstanceRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "VMID", ctx.GetVar("VMID")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.StopVMInstance(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "StopVMInstanceResponse", "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 1 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet4207DescribeVMInstance27(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewDescribeVMInstanceRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "VMIDs", ctx.GetVar("VMID")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.DescribeVMInstance(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "DescribeVMInstanceResponse", "str_eq"),
			ctx.NewValidator("Infos.0.State", "Stopped", "str_eq"),
		},
		MaxRetries:    30,
		RetryInterval: 10 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}

func testSet4207DeleteVMInstance28(ctx *utest.TestContext) {
	time.Sleep(time.Duration(0) * time.Second)

	req := ucloudstackClient.NewDeleteVMInstanceRequest()

	ctx.NoError(utest.SetReqValue(req, "Zone", ctx.GetVar("Zone")))

	ctx.NoError(utest.SetReqValue(req, "VMID", ctx.GetVar("VMID")))

	ctx.NoError(utest.SetReqValue(req, "Region", ctx.GetVar("Region")))

	testCase := utest.TestCase{
		Invoker: func() (interface{}, error) {
			return ucloudstackClient.DeleteVMInstance(req)
		},
		Validators: []utest.TestValidator{
			ctx.NewValidator("RetCode", 0, "str_eq"),
			ctx.NewValidator("Action", "DeleteVMInstanceResponse", "str_eq"),
		},
		MaxRetries:    3,
		RetryInterval: 1 * time.Second,
		T:             ctx.T,
	}

	resp, err := testCase.Run()
	if resp == nil || err != nil {

		ctx.T.Error(err)

	}

}
