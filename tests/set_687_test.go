// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/functions"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"

	"github.com/ucloud/ucloud-sdk-go/ucloud"
)

func TestSet687(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: 687,
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"Region":          "cn-sh2",
				"Zone":            "cn-sh2-02",
				"VPC_name_1":      "VPC_api_test_1",
				"remark":          "remark_api_test",
				"tag":             "tag_api_test",
				"Subnet_name_1_1": "subnet_1_1",
				"subnet_netmask":  24,
				"project_id":      "org-achi1o",
			}
		},
		Owners: []string{"peter.zhang@ucloud.cn"},
		Title:  "VPC-Subnet-Vip",
		Steps: []*driver.Step{
			testStep687GetProjectList00,
			testStep687CreateVPC01,
			testStep687CreateSubnet02,
			testStep687UpdateSubnetAttribute03,
			testStep687DescribeSubnet04,
			testStep687CreateVPC05,
			testStep687CreateSubnet06,
			testStep687CreateSubnet07,
			testStep687DescribeSubnet08,
			testStep687AllocateVIP09,
			testStep687DescribeVIP10,
			testStep687DescribeSubnetResource11,
			testStep687ReleaseVIP12,
			testStep687DeleteSubnet13,
			testStep687DeleteSubnet14,
			testStep687DeleteSubnet15,
			testStep687AddVPCNetwork16,
			testStep687DescribeVPC17,
			testStep687CreateVPCIntercom18,
			testStep687DescribeVPCIntercom19,
			testStep687DeleteVPCIntercom20,
			testStep687DeleteVPC21,
			testStep687DeleteVPC22,
		},
	})
}

var testStep687GetProjectList00 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("GetProjectList")
		req.SetPayload(map[string]interface{}{})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("project_list", step.Must(utils.GetValue(resp, "ProjectSet")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetProjectListResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取帐号下的项目列表",
	FastFail:      false,
}

var testStep687CreateVPC01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CreateVPC")
		req.SetPayload(map[string]interface{}{
			"Tag":    step.Scenario.GetVar("tag"),
			"Remark": step.Scenario.GetVar("remark"),
			"Region": step.Scenario.GetVar("Region"),
			"Network": []interface{}{
				"172.16.16.0/20",
			},
			"Name": step.Scenario.GetVar("VPC_name_1"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("VPCId_1", step.Must(utils.GetValue(resp, "VPCId")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "创建VPC",
	FastFail:      false,
}

var testStep687CreateSubnet02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CreateSubnet")
		req.SetPayload(map[string]interface{}{
			"VPCId":      step.Scenario.GetVar("VPCId_1"),
			"Tag":        step.Scenario.GetVar("tag"),
			"SubnetName": step.Scenario.GetVar("Subnet_name_1_1"),
			"Subnet":     "172.16.17.0",
			"Remark":     step.Scenario.GetVar("remark"),
			"Region":     step.Scenario.GetVar("Region"),
			"Netmask":    step.Scenario.GetVar("subnet_netmask"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("SubnetId_1_1", step.Must(utils.GetValue(resp, "SubnetId")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "创建子网",
	FastFail:      false,
}

var testStep687UpdateSubnetAttribute03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("UpdateSubnetAttribute")
		req.SetPayload(map[string]interface{}{
			"Tag":      "qa",
			"SubnetId": step.Scenario.GetVar("SubnetId_1_1"),
			"Region":   step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "UpdateSubnetAttributeResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "更新子网信息",
	FastFail:      false,
}

var testStep687DescribeSubnet04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeSubnet")
		req.SetPayload(map[string]interface{}{
			"SubnetId": step.Scenario.GetVar("SubnetId_1_1"),
			"Region":   step.Scenario.GetVar("Region"),
			"Offset":   1,
			"Limit":    1,
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取子网信息",
	FastFail:      false,
}

var testStep687CreateVPC05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CreateVPC")
		req.SetPayload(map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"Network": []interface{}{
				"192.168.16.0/20",
			},
			"Name": "vpc_2",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("VPCId_2", step.Must(utils.GetValue(resp, "VPCId")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "创建VPC",
	FastFail:      false,
}

var testStep687CreateSubnet06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CreateSubnet")
		req.SetPayload(map[string]interface{}{
			"VPCId":      step.Scenario.GetVar("VPCId_2"),
			"SubnetName": "Subnet_2_1",
			"Subnet":     "192.168.17.0",
			"Region":     step.Scenario.GetVar("Region"),
			"Netmask":    step.Scenario.GetVar("subnet_netmask"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("SubnetId_2_1", step.Must(utils.GetValue(resp, "SubnetId")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "创建子网",
	FastFail:      false,
}

var testStep687CreateSubnet07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CreateSubnet")
		req.SetPayload(map[string]interface{}{
			"VPCId":      step.Scenario.GetVar("VPCId_2"),
			"Tag":        "Subnet_2_2",
			"SubnetName": "Subnet_2_2",
			"Subnet":     "192.168.18.0",
			"Region":     step.Scenario.GetVar("Region"),
			"Netmask":    step.Scenario.GetVar("subnet_netmask"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("SubnetId_2_2", step.Must(utils.GetValue(resp, "SubnetId")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateSubnetResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建子网",
	FastFail:      false,
}

var testStep687DescribeSubnet08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeSubnet")
		req.SetPayload(map[string]interface{}{
			"VPCId":    step.Scenario.GetVar("VPCId_1"),
			"SubnetId": step.Scenario.GetVar("SubnetId_1_1"),
			"Region":   step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.VPCId", step.Scenario.GetVar("VPCId_1"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.VPCName", step.Scenario.GetVar("VPC_name_1"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.SubnetId", step.Scenario.GetVar("SubnetId_1_1"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.SubnetName", step.Scenario.GetVar("Subnet_name_1_1"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Tag", "qa", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Remark", step.Scenario.GetVar("remark"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.SubnetType", 2, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Netmask", 24, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取子网信息",
	FastFail:      false,
}

var testStep687AllocateVIP09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("AllocateVIP")
		req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"VPCId":    step.Scenario.GetVar("VPCId_1"),
			"SubnetId": step.Scenario.GetVar("SubnetId_1_1"),
			"Remark":   "vip_tag1",
			"Region":   step.Scenario.GetVar("Region"),
			"Name":     "vip_api_auto",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("VIPId_1", step.Must(utils.GetValue(resp, "VIPSet.0.VIPId")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "申请内网虚拟IP",
	FastFail:      false,
}

var testStep687DescribeVIP10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeVIP")
		req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"VPCId":    step.Scenario.GetVar("VPCId_1"),
			"SubnetId": step.Scenario.GetVar("SubnetId_1_1"),
			"Region":   step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("VIP_ip_1", step.Must(utils.GetValue(resp, "DataSet.0")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("VIPSet.0.VPCId", step.Scenario.GetVar("VPCId_1"), "str_eq"),
			validation.Builtins.NewValidator("VIPSet.0.VIPId", step.Scenario.GetVar("VIPId_1"), "str_eq"),
			validation.Builtins.NewValidator("VIPSet.0.SubnetId", step.Scenario.GetVar("SubnetId_1_1"), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取内网虚拟IP信息",
	FastFail:      false,
}

var testStep687DescribeSubnetResource11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeSubnetResource")
		req.SetPayload(map[string]interface{}{
			"SubnetId": step.Scenario.GetVar("SubnetId_1_1"),
			"Region":   step.Scenario.GetVar("Region"),
			"Offset":   0,
			"Limit":    20,
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("TotalCount", 1, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.ResourceId", step.Scenario.GetVar("VIPId_1"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.IP", step.Scenario.GetVar("VIP_ip_1"), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "展示子网资源",
	FastFail:      false,
}

var testStep687ReleaseVIP12 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("ReleaseVIP")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"VIPId":  step.Scenario.GetVar("VIPId_1"),
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "释放内网虚拟IP",
	FastFail:      false,
}

var testStep687DeleteSubnet13 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DeleteSubnet")
		req.SetPayload(map[string]interface{}{
			"SubnetId": step.Scenario.GetVar("SubnetId_1_1"),
			"Region":   step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除子网",
	FastFail:      false,
}

var testStep687DeleteSubnet14 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DeleteSubnet")
		req.SetPayload(map[string]interface{}{
			"SubnetId": step.Scenario.GetVar("SubnetId_2_1"),
			"Region":   step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除子网",
	FastFail:      false,
}

var testStep687DeleteSubnet15 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DeleteSubnet")
		req.SetPayload(map[string]interface{}{
			"SubnetId": step.Scenario.GetVar("SubnetId_2_2"),
			"Region":   step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除子网",
	FastFail:      false,
}

var testStep687AddVPCNetwork16 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("AddVPCNetwork")
		req.SetPayload(map[string]interface{}{
			"VPCId":  step.Scenario.GetVar("VPCId_1"),
			"Region": step.Scenario.GetVar("Region"),
			"Network": []interface{}{
				"10.100.96.0/20",
			},
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "AddVPCNetworkResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "添加VPC网段",
	FastFail:      false,
}

var testStep687DescribeVPC17 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeVPC")
		req.SetPayload(map[string]interface{}{
			"VPCIds": []interface{}{
				step.Scenario.GetVar("VPCId_1"),
			},
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeVPCResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取VPC信息",
	FastFail:      false,
}

var testStep687CreateVPCIntercom18 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CreateVPCIntercom")
		req.SetPayload(map[string]interface{}{
			"VPCId":        step.Scenario.GetVar("VPCId_1"),
			"Region":       step.Scenario.GetVar("Region"),
			"DstVPCId":     step.Scenario.GetVar("VPCId_2"),
			"DstRegion":    step.Scenario.GetVar("Region"),
			"DstProjectId": step.Must(functions.SearchValue(step.Scenario.GetVar("project_list"), "IsDefault", true, "ProjectId")),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "新建VPC互通",
	FastFail:      false,
}

var testStep687DescribeVPCIntercom19 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeVPCIntercom")
		req.SetPayload(map[string]interface{}{
			"VPCId":  step.Scenario.GetVar("VPCId_1"),
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.VPCId", step.Scenario.GetVar("VPCId_2"), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取VPC互通信息",
	FastFail:      false,
}

var testStep687DeleteVPCIntercom20 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DeleteVPCIntercom")
		req.SetPayload(map[string]interface{}{
			"VPCId":        step.Scenario.GetVar("VPCId_1"),
			"Region":       step.Scenario.GetVar("Region"),
			"DstVPCId":     step.Scenario.GetVar("VPCId_2"),
			"DstRegion":    step.Scenario.GetVar("Region"),
			"DstProjectId": step.Must(functions.SearchValue(step.Scenario.GetVar("project_list"), "IsDefault", true, "ProjectId")),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "删除VPC互通",
	FastFail:      false,
}

var testStep687DeleteVPC21 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DeleteVPC")
		req.SetPayload(map[string]interface{}{
			"VPCId":  step.Scenario.GetVar("VPCId_1"),
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除VPC",
	FastFail:      false,
}

var testStep687DeleteVPC22 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DeleteVPC")
		req.SetPayload(map[string]interface{}{
			"VPCId":  step.Scenario.GetVar("VPCId_2"),
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除VPC",
	FastFail:      false,
}
