// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/functions"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"

	"github.com/ucloud/ucloud-sdk-go/ucloud"
)

func TestSet207(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: 207,
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{

				"Region":       "cn-bj2",
				"Zone":         "cn-bj2-02",
				"DBTypeId":     "percona-5.7",
				"InstanceMode": "Normal",
				"InstanceType": "SATA_SSD",
				"Port":         3306,
				"MemoryLimit":  1000,
				"DiskSpace":    20,
				"DBName":       "auto_ptbz_",
				"UseSSD":       true,
			}
		},
		Owners: []string{"xiangyu.wang@ucloud.cn"},
		Title:  "Mysql_普通类型SSD机型_percona 5.7_07",
		Steps: []*driver.Step{
			testStep207DescribeUDBType00,
			testStep207DescribeUDBParamGroup01,
			testStep207DescribeUDBInstancePrice02,
			testStep207CheckUDBInstanceAllowance03,
			testStep207CreateUDBInstance04,
			testStep207DescribeUDBInstanceState05,
			testStep207StopUDBInstance06,
			testStep207DescribeUDBInstance07,
			testStep207DescribeUDBInstanceUpgradePrice08,
			testStep207CheckUDBInstanceAllowance09,
			testStep207ResizeUDBInstance10,
			testStep207DescribeUDBInstance11,
			testStep207CheckUDBInstanceToHAAllowance12,
			testStep207DescribePromoteToHAPrice13,
			testStep207PromoteUDBInstanceToHA14,
			testStep207DescribeUDBInstanceState15,
			testStep207SwitchUDBInstanceToHA16,
			testStep207DescribeUDBInstance17,
			testStep207StopUDBInstance18,
			testStep207DescribeUDBInstance19,
			testStep207DeleteUDBInstance20,
		},
	})
}

var testStep207DescribeUDBType00 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBType")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取云数据库支持类型",
	FastFail:      false,
}

var testStep207DescribeUDBParamGroup01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBParamGroup")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"Offset": 0,
			"Limit":  100,
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("DataSet_paramGroup", step.Must(utils.GetValue(resp, "DataSet")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取参数信息",
	FastFail:      false,
}

var testStep207DescribeUDBInstancePrice02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstancePrice")
		req.SetPayload(map[string]interface{}{
			"Zone":        step.Scenario.GetVar("Zone"),
			"Region":      step.Scenario.GetVar("Region"),
			"MemoryLimit": step.Scenario.GetVar("MemoryLimit"),
			"DiskSpace":   step.Scenario.GetVar("DiskSpace"),
			"DBTypeId":    step.Scenario.GetVar("DBTypeId"),
			"Count":       1,
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取云数据库价格",
	FastFail:      false,
}

var testStep207CheckUDBInstanceAllowance03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CheckUDBInstanceAllowance")
		req.SetPayload(map[string]interface{}{
			"Zone":        step.Scenario.GetVar("Zone"),
			"UseSSD":      step.Scenario.GetVar("UseSSD"),
			"Region":      step.Scenario.GetVar("Region"),
			"MemoryLimit": step.Scenario.GetVar("MemoryLimit"),
			"DiskSpace":   step.Scenario.GetVar("DiskSpace"),
			"Count":       1,
			"ClassType":   "SQL",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "核查UDB资源余量",
	FastFail:      false,
}

var testStep207CreateUDBInstance04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CreateUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":          step.Scenario.GetVar("Zone"),
			"Region":        step.Scenario.GetVar("Region"),
			"Quantity":      0,
			"Port":          step.Scenario.GetVar("Port"),
			"ParamGroupId":  step.Must(functions.SearchValue(step.Scenario.GetVar("DataSet_paramGroup"), "DBTypeId", step.Scenario.GetVar("DBTypeId"), "GroupId")),
			"Name":          step.Must(functions.Concat(step.Scenario.GetVar("DBName"), step.Scenario.GetVar("DBTypeId"))),
			"MemoryLimit":   step.Scenario.GetVar("MemoryLimit"),
			"InstanceType":  step.Scenario.GetVar("InstanceType"),
			"InstanceMode":  step.Scenario.GetVar("InstanceMode"),
			"DiskSpace":     step.Scenario.GetVar("DiskSpace"),
			"DBTypeId":      step.Scenario.GetVar("DBTypeId"),
			"ChargeType":    "Month",
			"AdminPassword": "guanliyuanmima",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("DBId", step.Must(utils.GetValue(resp, "DBId")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "创建数据库",
	FastFail:      false,
}

var testStep207DescribeUDBInstanceState05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstanceState")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    50,
	RetryInterval: 10 * time.Second,
	Title:         "获取云数据库状态",
	FastFail:      false,
}

var testStep207StopUDBInstance06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("StopUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "关闭云数据库",
	FastFail:      false,
}

var testStep207DescribeUDBInstance07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"Region":    step.Scenario.GetVar("Region"),
			"Offset":    0,
			"Limit":     100,
			"DBId":      step.Scenario.GetVar("DBId"),
			"ClassType": "sql",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("VirtualIP", step.Must(utils.GetValue(resp, "DataSet.0.VirtualIP")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Name ", step.Must(functions.Concat(step.Scenario.GetVar("DBName"), step.Scenario.GetVar("DBTypeId"))), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.DBTypeId", step.Scenario.GetVar("DBTypeId"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Shutoff", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    20,
	RetryInterval: 3 * time.Second,
	Title:         "获取云数据库信息",
	FastFail:      false,
}

var testStep207DescribeUDBInstanceUpgradePrice08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstanceUpgradePrice")
		req.SetPayload(map[string]interface{}{
			"Zone":        step.Scenario.GetVar("Zone"),
			"Region":      step.Scenario.GetVar("Region"),
			"MemoryLimit": step.Must(functions.Calculate("+", step.Scenario.GetVar("MemoryLimit"), 1)),
			"DiskSpace":   step.Must(functions.Calculate("+", step.Scenario.GetVar("DiskSpace"), 1)),
			"DBId":        step.Scenario.GetVar("DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取UDB实例升降级价格信息",
	FastFail:      false,
}

var testStep207CheckUDBInstanceAllowance09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CheckUDBInstanceAllowance")
		req.SetPayload(map[string]interface{}{
			"Zone":        step.Scenario.GetVar("Zone"),
			"UseSSD":      step.Scenario.GetVar("UseSSD"),
			"Region":      step.Scenario.GetVar("Region"),
			"MemoryLimit": step.Must(functions.Calculate("+", step.Scenario.GetVar("MemoryLimit"), 1)),
			"DiskSpace":   step.Must(functions.Calculate("+", step.Scenario.GetVar("DiskSpace"), 1)),
			"Count":       1,
			"ClassType":   "SQL",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "核查UDB资源余量",
	FastFail:      false,
}

var testStep207ResizeUDBInstance10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("ResizeUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":              step.Scenario.GetVar("Zone"),
			"UseSSD":            step.Scenario.GetVar("UseSSD"),
			"StartAfterUpgrade": true,
			"SSDType":           "SATA",
			"Region":            step.Scenario.GetVar("Region"),
			"MemoryLimit":       step.Must(functions.Calculate("+", step.Scenario.GetVar("MemoryLimit"), 1)),
			"DiskSpace":         step.Must(functions.Calculate("+", step.Scenario.GetVar("DiskSpace"), 1)),
			"DBId":              step.Scenario.GetVar("DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ResizeUDBInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "修改UDB实例的配置",
	FastFail:      false,
}

var testStep207DescribeUDBInstance11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"Region":    step.Scenario.GetVar("Region"),
			"Offset":    0,
			"Limit":     100,
			"DBId":      step.Scenario.GetVar("DBId"),
			"ClassType": "sql",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Name ", step.Must(functions.Concat(step.Scenario.GetVar("DBName"), step.Scenario.GetVar("DBTypeId"))), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.DBTypeId", step.Scenario.GetVar("DBTypeId"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Running", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.MemoryLimit", step.Must(functions.Calculate("+", step.Scenario.GetVar("MemoryLimit"), 1)), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.DiskSpace", step.Must(functions.Calculate("+", step.Scenario.GetVar("DiskSpace"), 10)), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    100,
	RetryInterval: 10 * time.Second,
	Title:         "获取云数据库信息",
	FastFail:      false,
}

var testStep207CheckUDBInstanceToHAAllowance12 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CheckUDBInstanceToHAAllowance")
		req.SetPayload(map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CheckUDBInstanceToHAAllowanceResponse", "str_eq"),
			validation.Builtins.NewValidator("Allowance", "Yes", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "核查db是否可以升级为高可用",
	FastFail:      false,
}

var testStep207DescribePromoteToHAPrice13 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribePromoteToHAPrice")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribePromoteToHAPriceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取单点升级高可用实例的差价",
	FastFail:      false,
}

var testStep207PromoteUDBInstanceToHA14 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("PromoteUDBInstanceToHA")
		req.SetPayload(map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "PromoteUDBInstanceToHAResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "普通db升级为高可用",
	FastFail:      false,
}

var testStep207DescribeUDBInstanceState15 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstanceState")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDBInstanceStateResponse", "str_eq"),
			validation.Builtins.NewValidator("State", "WaitForSwitch", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    30,
	RetryInterval: 10 * time.Second,
	Title:         "获取云数据库状态",
	FastFail:      false,
}

var testStep207SwitchUDBInstanceToHA16 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("SwitchUDBInstanceToHA")
		req.SetPayload(map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("HADBId", step.Must(utils.GetValue(resp, "DBId")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "SwitchUDBInstanceToHAResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(20) * time.Second,
	MaxRetries:    3,
	RetryInterval: 10 * time.Second,
	Title:         "普通UDB切换为高可用",
	FastFail:      false,
}

var testStep207DescribeUDBInstance17 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"Region":    step.Scenario.GetVar("Region"),
			"Offset":    0,
			"Limit":     100,
			"DBId":      step.Scenario.GetVar("HADBId"),
			"ClassType": "sql",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Name ", step.Must(functions.Concat(step.Scenario.GetVar("DBName"), step.Scenario.GetVar("DBTypeId"))), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.VirtualIP", step.Scenario.GetVar("VirtualIP"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    30,
	RetryInterval: 10 * time.Second,
	Title:         "获取云数据库信息",
	FastFail:      false,
}

var testStep207StopUDBInstance18 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("StopUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("HADBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "StopUDBInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "关闭云数据库",
	FastFail:      false,
}

var testStep207DescribeUDBInstance19 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"Region":    step.Scenario.GetVar("Region"),
			"Offset":    0,
			"Limit":     100,
			"DBId":      step.Scenario.GetVar("HADBId"),
			"ClassType": "sql",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDBInstanceResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Shutoff", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    6,
	RetryInterval: 10 * time.Second,
	Title:         "获取云数据库信息",
	FastFail:      false,
}

var testStep207DeleteUDBInstance20 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DeleteUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("HADBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteUDBInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(5) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除云数据库",
	FastFail:      false,
}
