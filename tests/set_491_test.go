// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/functions"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"

	"github.com/ucloud/ucloud-sdk-go/ucloud"
)

func TestSet491(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: 491,
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{

				"Region":       "cn-bj2",
				"Zone":         "cn-bj2-02",
				"DBTypeId":     "mysql-5.5",
				"InstanceMode": "HA",
				"InstanceType": "SATA_SSD",
				"Port":         3306,
				"MemoryLimit":  1000,
				"DiskSpace":    20,
				"DBName":       "auto_hassd_",
				"UseSSD":       true,
			}
		},
		Owners: []string{"xiangyu.wang@ucloud.cn"},
		Title:  "Mysql_高可用类型SSD机型_mysql 5.5_04",
		Steps: []*driver.Step{
			testStep491DescribeUDBType00,
			testStep491DescribeUDBParamGroup01,
			testStep491DescribeUDBInstancePrice02,
			testStep491CheckUDBInstanceAllowance03,
			testStep491CreateUDBInstance04,
			testStep491DescribeUDBInstance05,
			testStep491DescribeUDBInstanceState06,
			testStep491DescribeUDBInstanceBinlog07,
			testStep491BackupUDBInstanceBinlog08,
			testStep491DescribeUDBLogPackage09,
			testStep491DescribeUDBInstanceBinlogBackupState10,
			testStep491DeleteUDBLogPackage11,
			testStep491BackupUDBInstanceSlowLog12,
			testStep491DescribeUDBLogPackage13,
			testStep491DescribeUDBLogBackupURL14,
			testStep491DescribeUDBInstanceLog15,
			testStep491DeleteUDBLogPackage16,
			testStep491BackupUDBInstanceErrorLog17,
			testStep491DescribeUDBLogPackage18,
			testStep491DescribeUDBBinlogBackupURL19,
			testStep491DescribeUDBInstanceLog20,
			testStep491DeleteUDBLogPackage21,
			testStep491ClearUDBLog22,
			testStep491StopUDBInstance23,
			testStep491DescribeUDBInstance24,
			testStep491DeleteUDBInstance25,
		},
	})
}

var testStep491DescribeUDBType00 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBType")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取云数据库支持类型",
	FastFail:      false,
}

var testStep491DescribeUDBParamGroup01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBParamGroup")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"Offset": 0,
			"Limit":  100,
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("DataSet_paramGroup", step.Must(utils.GetValue(resp, "DataSet")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取参数信息",
	FastFail:      false,
}

var testStep491DescribeUDBInstancePrice02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstancePrice")
		req.SetPayload(map[string]interface{}{
			"Zone":        step.Scenario.GetVar("Zone"),
			"Region":      step.Scenario.GetVar("Region"),
			"MemoryLimit": step.Scenario.GetVar("MemoryLimit"),
			"DiskSpace":   step.Scenario.GetVar("DiskSpace"),
			"DBTypeId":    step.Scenario.GetVar("DBTypeId"),
			"Count":       1,
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取云数据库价格",
	FastFail:      false,
}

var testStep491CheckUDBInstanceAllowance03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CheckUDBInstanceAllowance")
		req.SetPayload(map[string]interface{}{
			"Zone":        step.Scenario.GetVar("Zone"),
			"UseSSD":      step.Scenario.GetVar("UseSSD"),
			"SSDType":     "SATA",
			"Region":      step.Scenario.GetVar("Region"),
			"MemoryLimit": step.Scenario.GetVar("MemoryLimit"),
			"DiskSpace":   step.Scenario.GetVar("DiskSpace"),
			"Count":       1,
			"ClassType":   "SQL",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "核查UDB资源余量",
	FastFail:      false,
}

var testStep491CreateUDBInstance04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CreateUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":          step.Scenario.GetVar("Zone"),
			"Region":        step.Scenario.GetVar("Region"),
			"Quantity":      0,
			"Port":          step.Scenario.GetVar("Port"),
			"ParamGroupId":  step.Must(functions.SearchValue(step.Scenario.GetVar("DataSet_paramGroup"), "DBTypeId", step.Scenario.GetVar("DBTypeId"), "GroupId")),
			"Name":          step.Must(functions.Concat(step.Scenario.GetVar("DBName"), step.Scenario.GetVar("DBTypeId"))),
			"MemoryLimit":   step.Scenario.GetVar("MemoryLimit"),
			"InstanceType":  step.Scenario.GetVar("InstanceType"),
			"InstanceMode":  step.Scenario.GetVar("InstanceMode"),
			"DiskSpace":     step.Scenario.GetVar("DiskSpace"),
			"DBTypeId":      step.Scenario.GetVar("DBTypeId"),
			"ChargeType":    "Month",
			"AdminPassword": "guanliyuanmima",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("DBId", step.Must(utils.GetValue(resp, "DBId")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建数据库",
	FastFail:      false,
}

var testStep491DescribeUDBInstance05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"Region":    step.Scenario.GetVar("Region"),
			"Offset":    0,
			"Limit":     100,
			"DBId":      step.Scenario.GetVar("DBId"),
			"ClassType": "sql",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取云数据库信息",
	FastFail:      false,
}

var testStep491DescribeUDBInstanceState06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstanceState")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    50,
	RetryInterval: 10 * time.Second,
	Title:         "获取云数据库状态",
	FastFail:      false,
}

var testStep491DescribeUDBInstanceBinlog07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstanceBinlog")
		req.SetPayload(map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"Region":    step.Scenario.GetVar("Region"),
			"EndTime":   step.Must(functions.GetTimestamp(10)),
			"DBId":      step.Scenario.GetVar("DBId"),
			"BeginTime": step.Must(functions.Calculate("-", step.Must(functions.GetTimestamp(10)), 604800)),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("DataSet_binlog_01", step.Must(utils.GetValue(resp, "DataSet.0.Name")))
		step.Scenario.SetVar("DataSet_binlog_02", step.Must(utils.GetValue(resp, "DataSet.1.Name")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取UDBbinlog列表",
	FastFail:      false,
}

var testStep491BackupUDBInstanceBinlog08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("BackupUDBInstanceBinlog")
		req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Region":     step.Scenario.GetVar("Region"),
			"DBId":       step.Scenario.GetVar("DBId"),
			"BackupName": "auto_binlog_package",
			"BackupFile": step.Scenario.GetVar("DataSet_binlog_01"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "备份UDB指定时间段的binlog列表",
	FastFail:      false,
}

var testStep491DescribeUDBLogPackage09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBLogPackage")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Type":   2,
			"Region": step.Scenario.GetVar("Region"),
			"Offset": 0,
			"Limit":  100,
			"DBId":   step.Scenario.GetVar("DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("DataSet_package1", step.Must(utils.GetValue(resp, "DataSet")))
		step.Scenario.SetVar("BackupId", step.Must(utils.GetValue(resp, "DataSet.0.BackupId")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDBLogPackageResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Success", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(150) * time.Second,
	MaxRetries:    20,
	RetryInterval: 10 * time.Second,
	Title:         "列表UDB实例日志备份信息",
	FastFail:      true,
}

var testStep491DescribeUDBInstanceBinlogBackupState10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstanceBinlogBackupState")
		req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Region":   step.Scenario.GetVar("Region"),
			"BackupId": step.Scenario.GetVar("BackupId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDBInstanceBinlogBackupStateResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(5) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取udb实例备份状态",
	FastFail:      false,
}

var testStep491DeleteUDBLogPackage11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DeleteUDBLogPackage")
		req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Region":   step.Scenario.GetVar("Region"),
			"BackupId": step.Must(functions.SearchValue(step.Scenario.GetVar("DataSet_package1"), "BackupName", "auto_binlog_package", "BackupId")),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(80) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除UDB日志包",
	FastFail:      false,
}

var testStep491BackupUDBInstanceSlowLog12 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("BackupUDBInstanceSlowLog")
		req.SetPayload(map[string]interface{}{
			"Region":     step.Scenario.GetVar("Region"),
			"EndTime":    step.Must(functions.GetTimestamp(10)),
			"DBId":       step.Scenario.GetVar("DBId"),
			"BeginTime":  step.Must(functions.Calculate("-", step.Must(functions.GetTimestamp(10)), 604800)),
			"BackupName": "auto_slowlog_package",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "备份UDB指定时间段的slowlog分析结果",
	FastFail:      false,
}

var testStep491DescribeUDBLogPackage13 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBLogPackage")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Type":   3,
			"Region": step.Scenario.GetVar("Region"),
			"Offset": 0,
			"Limit":  100,
			"DBId":   step.Scenario.GetVar("DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("DataSet_package2", step.Must(utils.GetValue(resp, "DataSet")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDBLogPackageResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Success", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(150) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "列表UDB实例日志备份信息",
	FastFail:      true,
}

var testStep491DescribeUDBLogBackupURL14 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBLogBackupURL")
		req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Region":   step.Scenario.GetVar("Region"),
			"DBId":     step.Scenario.GetVar("DBId"),
			"BackupId": step.Scenario.GetVar("BackupId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDBLogBackupURLResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取UDB的slowlog备份地址",
	FastFail:      false,
}

var testStep491DescribeUDBInstanceLog15 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstanceLog")
		req.SetPayload(map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"Region":    step.Scenario.GetVar("Region"),
			"LogType":   "slow",
			"EndTime":   step.Must(functions.GetTimestamp(10)),
			"DBId":      step.Scenario.GetVar("DBId"),
			"BeginTime": step.Must(functions.Calculate("-", step.Must(functions.GetTimestamp(10)), 86400)),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDBInstanceLogResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取UDB错误日志或慢查询日志",
	FastFail:      false,
}

var testStep491DeleteUDBLogPackage16 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DeleteUDBLogPackage")
		req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Region":   step.Scenario.GetVar("Region"),
			"BackupId": step.Must(functions.SearchValue(step.Scenario.GetVar("DataSet_package2"), "BackupName", "auto_slowlog_package", "BackupId")),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "删除UDB日志包",
	FastFail:      false,
}

var testStep491BackupUDBInstanceErrorLog17 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("BackupUDBInstanceErrorLog")
		req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Region":     step.Scenario.GetVar("Region"),
			"DBId":       step.Scenario.GetVar("DBId"),
			"BackupName": "auto_errorlog_package",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "备份UDB指定时间段的errorlog",
	FastFail:      false,
}

var testStep491DescribeUDBLogPackage18 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBLogPackage")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Type":   4,
			"Region": step.Scenario.GetVar("Region"),
			"Offset": 0,
			"Limit":  100,
			"DBId":   step.Scenario.GetVar("DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("DataSet_package3", step.Must(utils.GetValue(resp, "DataSet")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDBLogPackageResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Success", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(150) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "列表UDB实例日志备份信息",
	FastFail:      true,
}

var testStep491DescribeUDBBinlogBackupURL19 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBBinlogBackupURL")
		req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Region":   step.Scenario.GetVar("Region"),
			"DBId":     step.Scenario.GetVar("DBId"),
			"BackupId": step.Must(functions.SearchValue(step.Scenario.GetVar("DataSet_package3"), "BackupName", "auto_errorlog_package", "BackupId")),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取UDB的Binlog备份地址",
	FastFail:      false,
}

var testStep491DescribeUDBInstanceLog20 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstanceLog")
		req.SetPayload(map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"Region":    step.Scenario.GetVar("Region"),
			"LogType":   "error",
			"EndTime":   step.Must(functions.GetTimestamp(10)),
			"DBId":      step.Scenario.GetVar("DBId"),
			"BeginTime": step.Must(functions.Calculate("-", step.Must(functions.GetTimestamp(10)), 86400)),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDBInstanceLogResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取UDB错误日志或慢查询日志",
	FastFail:      false,
}

var testStep491DeleteUDBLogPackage21 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DeleteUDBLogPackage")
		req.SetPayload(map[string]interface{}{
			"Zone":     step.Scenario.GetVar("Zone"),
			"Region":   step.Scenario.GetVar("Region"),
			"BackupId": step.Must(functions.SearchValue(step.Scenario.GetVar("DataSet_package3"), "BackupName", "auto_errorlog_package", "BackupId")),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "删除UDB日志包",
	FastFail:      false,
}

var testStep491ClearUDBLog22 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("ClearUDBLog")
		req.SetPayload(map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"Region":  step.Scenario.GetVar("Region"),
			"LogType": 30,
			"DBId":    step.Scenario.GetVar("DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "清除日志",
	FastFail:      false,
}

var testStep491StopUDBInstance23 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("StopUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "StopUDBInstanceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "关闭云数据库",
	FastFail:      false,
}

var testStep491DescribeUDBInstance24 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":      step.Scenario.GetVar("Zone"),
			"Region":    step.Scenario.GetVar("Region"),
			"Offset":    0,
			"Limit":     100,
			"DBId":      step.Scenario.GetVar("DBId"),
			"ClassType": "sql",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.DBTypeId", step.Scenario.GetVar("DBTypeId"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Shutoff", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    20,
	RetryInterval: 3 * time.Second,
	Title:         "获取云数据库信息",
	FastFail:      false,
}

var testStep491DeleteUDBInstance25 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DeleteUDBInstance")
		req.SetPayload(map[string]interface{}{
			"Zone":   step.Scenario.GetVar("Zone"),
			"Region": step.Scenario.GetVar("Region"),
			"DBId":   step.Scenario.GetVar("DBId"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "删除云数据库",
	FastFail:      false,
}
