// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/functions"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"

	"github.com/ucloud/ucloud-sdk-go/ucloud"
)

func TestSet2378(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: 2378,
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"Region":                "cn-sh2",
				"Zone":                  "cn-sh2-02",
				"BucketName_2":          scenario.Must(functions.Concat("apitest-", scenario.Must(functions.GetTimestamp(10)))),
				"original_type":         "private",
				"tokenName":             "test-auto-token",
				"allowed_ops_0":         "TOKEN_ALLOW_WRITE",
				"allowed_ops_1":         "TOKEN_ALLOW_READ",
				"allowed_ops_2":         "TOKEN_ALLOW_DELETE",
				"allowed_ops_3":         "TOKEN_ALLOW_LIST",
				"allowed_ops_4":         "TOKEN_ALLOW_IOP",
				"allowedPrefixes":       "test-auto",
				"mirror-old-prefix":     "mirror-OldPrefix",
				"mirror-new-prefix":     "mirror-NewPrefix",
				"DailyReport_StartTime": scenario.Must(functions.Calculate("-", scenario.Must(functions.GetTimestamp(10)), 2592000)),
				"DailyReport_EndTime":   scenario.Must(functions.GetTimestamp(10)),
			}
		},
		Owners: []string{"chenoa.chen@ucloud.cn"},
		Title:  "UFile-单地域bucket-基本操作",
		Steps: []*driver.Step{
			testStep2378GetAvailableRegion00,
			testStep2378GetFuctionAvailableRegion01,
			testStep2378GetUFileDailyReport02,
			testStep2378CreateBucket03,
			testStep2378DescribeBucket04,
			testStep2378BindBucketDomain05,
			testStep2378DescribeBucketDomain06,
			testStep2378UnbindBucketDomain07,
			testStep2378UpdateBucket08,
			testStep2378DescribeBucket09,
			testStep2378DescribeMirrorRules10,
			testStep2378CreateUFileToken11,
			testStep2378DescribeUFileToken12,
			testStep2378UpdateUFileToken13,
			testStep2378DescribeUFileToken14,
			testStep2378DeleteUFileToken15,
			testStep2378DeleteBucket16,
		},
	})
}

var testStep2378GetAvailableRegion00 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("GetAvailableRegion")
		req.SetPayload(map[string]interface{}{})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetAvailableRegionResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取地域信息",
	FastFail:      false,
}

var testStep2378GetFuctionAvailableRegion01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("GetFuctionAvailableRegion")
		req.SetPayload(map[string]interface{}{})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetFuctionAvailableRegionResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取功能可用地域",
	FastFail:      false,
}

var testStep2378GetUFileDailyReport02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("GetUFileDailyReport")
		req.SetPayload(map[string]interface{}{
			"StartTime": step.Scenario.GetVar("DailyReport_StartTime"),
			"Region":    step.Scenario.GetVar("Region"),
			"EndTime":   step.Scenario.GetVar("DailyReport_EndTime"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUFileDailyReportResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "查看日消费报表",
	FastFail:      false,
}

var testStep2378CreateBucket03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CreateBucket")
		req.SetPayload(map[string]interface{}{
			"Type":       step.Scenario.GetVar("original_type"),
			"Region":     step.Scenario.GetVar("Region"),
			"BucketName": step.Scenario.GetVar("BucketName_2"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("bucketId", step.Must(utils.GetValue(resp, "BucketId")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateBucketResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建Bucket",
	FastFail:      true,
}

var testStep2378DescribeBucket04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeBucket")
		req.SetPayload(map[string]interface{}{
			"BucketName": step.Scenario.GetVar("BucketName_2"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("bindDomain", step.Must(utils.GetValue(resp, "DataSet.0.Domain.Src.0")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeBucketResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.BucketName", step.Scenario.GetVar("BucketName_2"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Type", "private", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取Bucket信息",
	FastFail:      true,
}

var testStep2378BindBucketDomain05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("BindBucketDomain")
		req.SetPayload(map[string]interface{}{
			"Domain":     step.Scenario.GetVar("bindDomain"),
			"BucketName": step.Scenario.GetVar("BucketName_2"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "BindBucketDomainResponse", "str_eq"),
			validation.Builtins.NewValidator("BucketId", step.Scenario.GetVar("bucketId"), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "绑定自定义域名",
	FastFail:      true,
}

var testStep2378DescribeBucketDomain06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeBucketDomain")
		req.SetPayload(map[string]interface{}{
			"BucketName": step.Scenario.GetVar("BucketName_2"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeBucketDomainResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Domain", step.Scenario.GetVar("bindDomain"), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取bcuket自定义域名信息",
	FastFail:      false,
}

var testStep2378UnbindBucketDomain07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("UnbindBucketDomain")
		req.SetPayload(map[string]interface{}{
			"Domain":     step.Scenario.GetVar("bindDomain"),
			"BucketName": step.Scenario.GetVar("BucketName_2"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "UnbindBucketDomainResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "解绑自定义域名",
	FastFail:      true,
}

var testStep2378UpdateBucket08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("UpdateBucket")
		req.SetPayload(map[string]interface{}{
			"Type":       "public",
			"BucketName": step.Scenario.GetVar("BucketName_2"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "UpdateBucketResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "更改Bucket属性",
	FastFail:      true,
}

var testStep2378DescribeBucket09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeBucket")
		req.SetPayload(map[string]interface{}{
			"BucketName": step.Scenario.GetVar("BucketName_2"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeBucketResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Type", "public", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取Bucket信息",
	FastFail:      true,
}

var testStep2378DescribeMirrorRules10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeMirrorRules")
		req.SetPayload(map[string]interface{}{
			"BucketName": step.Scenario.GetVar("BucketName_2"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeMirrorRulesResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取回源规则信息",
	FastFail:      false,
}

var testStep2378CreateUFileToken11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CreateUFileToken")
		req.SetPayload(map[string]interface{}{
			"TokenName": step.Scenario.GetVar("tokenName"),
			"Region":    step.Scenario.GetVar("Region"),
			"AllowedPrefixes": []interface{}{
				"*",
			},
			"AllowedOps": []interface{}{
				"TOKEN_ALLOW_READ",
			},
			"AllowedBuckets": []interface{}{
				step.Scenario.GetVar("BucketName_2"),
			},
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("tokenId", step.Must(utils.GetValue(resp, "TokenId")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "CreateUFileTokenResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "创建UFile令牌",
	FastFail:      false,
}

var testStep2378DescribeUFileToken12 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUFileToken")
		req.SetPayload(map[string]interface{}{
			"TokenId": step.Scenario.GetVar("tokenId"),
			"Region":  step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUFileTokenResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.TokenName", step.Scenario.GetVar("tokenName"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.AllowedOps.0", "TOKEN_ALLOW_READ", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.AllowedPrefixes.0", "*", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取令牌信息",
	FastFail:      false,
}

var testStep2378UpdateUFileToken13 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("UpdateUFileToken")
		req.SetPayload(map[string]interface{}{
			"TokenId": step.Scenario.GetVar("tokenId"),
			"Region":  step.Scenario.GetVar("Region"),
			"AllowedPrefixes": []interface{}{
				step.Scenario.GetVar("allowedPrefixes"),
			},
			"AllowedOps": []interface{}{
				step.Scenario.GetVar("allowed_ops_0"),
				step.Scenario.GetVar("allowed_ops_1"),
				step.Scenario.GetVar("allowed_ops_2"),
				step.Scenario.GetVar("allowed_ops_3"),
				step.Scenario.GetVar("allowed_ops_4"),
			},
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "UpdateUFileTokenResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "更新令牌",
	FastFail:      false,
}

var testStep2378DescribeUFileToken14 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUFileToken")
		req.SetPayload(map[string]interface{}{
			"TokenId": step.Scenario.GetVar("tokenId"),
			"Region":  step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUFileTokenResponse", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.TokenName", step.Scenario.GetVar("tokenName"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.AllowedPrefixes.0", step.Scenario.GetVar("allowedPrefixes"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.AllowedOps.0", "TOKEN_ALLOW_READ", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.AllowedOps.1", "TOKEN_ALLOW_WRITE", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.AllowedOps.2", "TOKEN_ALLOW_DELETE", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.AllowedOps.3", "TOKEN_ALLOW_LIST", "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.AllowedOps.4", "TOKEN_ALLOW_IOP", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取令牌信息",
	FastFail:      false,
}

var testStep2378DeleteUFileToken15 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DeleteUFileToken")
		req.SetPayload(map[string]interface{}{
			"TokenId": step.Scenario.GetVar("tokenId"),
			"Region":  step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteUFileTokenResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "删除令牌",
	FastFail:      false,
}

var testStep2378DeleteBucket16 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DeleteBucket")
		req.SetPayload(map[string]interface{}{
			"BucketName": step.Scenario.GetVar("BucketName_2"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DeleteBucketResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    20,
	RetryInterval: 3 * time.Second,
	Title:         "删除Bucket",
	FastFail:      false,
}
