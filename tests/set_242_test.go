// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/functions"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"

	"github.com/ucloud/ucloud-sdk-go/ucloud"
)

func TestSet242(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: 242,
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{

				"Region": "cn-bj2",
				"Zone":   "cn-bj2-02",
			}
		},
		Owners: []string{"caroline.yuan@ucloud.cn"},
		Title:  "主备Redis（计价）",
		Steps: []*driver.Step{
			testStep242DescribeURedisPrice00,
			testStep242CreateURedisGroup01,
			testStep242DescribeUMem02,
			testStep242DescribeOrderDetailInfo03,
			testStep242DescribeURedisUpgradePrice04,
			testStep242ResizeURedisGroup05,
			testStep242DescribeOrderDetailInfo06,
			testStep242GetResourceRenewPrice07,
			testStep242CreateRenew08,
			testStep242DescribeOrderDetailInfo09,
			testStep242DeleteURedisGroup10,
		},
	})
}

var testStep242DescribeURedisPrice00 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeURedisPrice")
		req.SetPayload(map[string]interface{}{
			"Zone":       step.Scenario.GetVar("Zone"),
			"Size":       1,
			"Region":     step.Scenario.GetVar("Region"),
			"Quantity":   1,
			"ChargeType": "Month",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("GetPrice", step.Must(utils.GetValue(resp, "DataSet.0.Price")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "取uredis价格信息",
	FastFail:      false,
}

var testStep242CreateURedisGroup01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CreateURedisGroup")
		req.SetPayload(map[string]interface{}{
			"Zone":             step.Scenario.GetVar("Zone"),
			"Size":             1,
			"Region":           step.Scenario.GetVar("Region"),
			"Quantity":         1,
			"Protocol":         "redis",
			"Name":             "Redis_zb",
			"HighAvailability": "disable",
			"ChargeType":       "Month",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("group_id", step.Must(utils.GetValue(resp, "GroupId")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "创建主备redis",
	FastFail:      false,
}

var testStep242DescribeUMem02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUMem")
		req.SetPayload(map[string]interface{}{
			"ResourceType": "single",
			"ResourceId":   step.Scenario.GetVar("group_id"),
			"Region":       step.Scenario.GetVar("Region"),
			"Protocol":     "redis",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("CreateTime", step.Must(utils.GetValue(resp, "DataSet.0.CreateTime")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.State", "Running", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(120) * time.Second,
	MaxRetries:    30,
	RetryInterval: 10 * time.Second,
	Title:         "获取UMem列表",
	FastFail:      false,
}

var testStep242DescribeOrderDetailInfo03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeOrderDetailInfo")
		req.SetPayload(map[string]interface{}{
			"ResourceIds": []interface{}{
				step.Scenario.GetVar("group_id"),
			},
			"QueryAll": true,
			"OrderTypes": []interface{}{
				"OT_BUY",
			},
			"OrderStates": []interface{}{
				"OS_FINISHED",
			},
			"EndTime":   step.Must(functions.GetTimestamp(10)),
			"BeginTime": step.Must(functions.Calculate("-", step.Must(functions.GetTimestamp(10)), 1200)),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("OrderInfos.0.Amount", step.Must(functions.Calculate("/", step.Scenario.GetVar("GetPrice"), 100)), "float_eq"),
		}
	},
	StartupDelay:  time.Duration(100) * time.Second,
	MaxRetries:    5,
	RetryInterval: 1 * time.Second,
	Title:         "获取订单信息",
	FastFail:      true,
}

var testStep242DescribeURedisUpgradePrice04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeURedisUpgradePrice")
		req.SetPayload(map[string]interface{}{
			"Zone":    step.Scenario.GetVar("Zone"),
			"Size":    2,
			"Region":  step.Scenario.GetVar("Region"),
			"GroupId": step.Scenario.GetVar("group_id"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("UpgradePrice", step.Must(utils.GetValue(resp, "Price")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取uredis升级价格信息",
	FastFail:      false,
}

var testStep242ResizeURedisGroup05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("ResizeURedisGroup")
		req.SetPayload(map[string]interface{}{
			"Size":    2,
			"Region":  step.Scenario.GetVar("Region"),
			"GroupId": step.Scenario.GetVar("group_id"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "调整容量",
	FastFail:      false,
}

var testStep242DescribeOrderDetailInfo06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeOrderDetailInfo")
		req.SetPayload(map[string]interface{}{
			"ResourceIds": []interface{}{
				step.Scenario.GetVar("group_id"),
			},
			"QueryAll": true,
			"OrderTypes": []interface{}{
				"OT_UPGRADE",
			},
			"OrderStates": []interface{}{
				"OS_FINISHED",
			},
			"EndTime": step.Must(functions.GetTimestamp(10)),
			"ChargeTypes": []interface{}{
				"Month",
			},
			"BeginTime": step.Must(functions.Calculate("-", step.Must(functions.GetTimestamp(10)), 1200)),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("OrderInfos.0.Amount", step.Must(functions.Calculate("+", step.Must(functions.Calculate("/", step.Scenario.GetVar("UpgradePrice"), 100)), 0.1)), "lt"),
			validation.Builtins.NewValidator("OrderInfos.0.Amount", step.Must(functions.Calculate("-", step.Must(functions.Calculate("/", step.Scenario.GetVar("UpgradePrice"), 100)), 0.1)), "gt"),
		}
	},
	StartupDelay:  time.Duration(100) * time.Second,
	MaxRetries:    5,
	RetryInterval: 1 * time.Second,
	Title:         "获取订单信息",
	FastFail:      false,
}

var testStep242GetResourceRenewPrice07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("GetResourceRenewPrice")
		req.SetPayload(map[string]interface{}{
			"ResourceIds": []interface{}{
				step.Scenario.GetVar("group_id"),
			},
			"Quantity":   1,
			"ChargeType": "Month",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("ReNewPrice", step.Must(utils.GetValue(resp, "RenewPriceSet.0.Price")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取续费价格",
	FastFail:      false,
}

var testStep242CreateRenew08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("CreateRenew")
		req.SetPayload(map[string]interface{}{
			"ResourceId": step.Scenario.GetVar("group_id"),
			"Quantity":   1,
			"ChargeType": "Month",
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "创建单个续费订单",
	FastFail:      false,
}

var testStep242DescribeOrderDetailInfo09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeOrderDetailInfo")
		req.SetPayload(map[string]interface{}{
			"ResourceIds": []interface{}{
				step.Scenario.GetVar("group_id"),
			},
			"QueryAll": true,
			"OrderTypes": []interface{}{
				"OT_RENEW",
			},
			"OrderStates": []interface{}{
				"OS_FINISHED",
			},
			"EndTime": step.Must(functions.GetTimestamp(10)),
			"ChargeTypes": []interface{}{
				"Month",
			},
			"BeginTime": step.Must(functions.Calculate("-", step.Must(functions.GetTimestamp(10)), 1200)),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("OrderInfos.0.Amount", step.Scenario.GetVar("ReNewPrice"), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(60) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "获取订单信息",
	FastFail:      false,
}

var testStep242DeleteURedisGroup10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DeleteURedisGroup")
		req.SetPayload(map[string]interface{}{
			"Region":  step.Scenario.GetVar("Region"),
			"GroupId": step.Scenario.GetVar("group_id"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{}
	},
	StartupDelay:  time.Duration(2) * time.Second,
	MaxRetries:    0,
	RetryInterval: 0 * time.Second,
	Title:         "删除主备redis",
	FastFail:      false,
}
