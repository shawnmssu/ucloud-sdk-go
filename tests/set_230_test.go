// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"

	"github.com/ucloud/ucloud-sdk-go/ucloud"
)

func TestSet230(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: 230,
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{

				"sbw_name":         "sbw_api_auto",
				"sbw_chargetype":   "Month",
				"sbw_bw":           20,
				"resize_bw":        22,
				"Region":           "cn-bj2",
				"eip_operatorname": "Bgp",
				"eip_bw":           2,
			}
		},
		Owners: []string{"gemin.jiang@ucloud.cn"},
		Title:  "共享带宽-基础-01",
		Steps: []*driver.Step{
			testStep230AllocateShareBandwidth00,
			testStep230AllocateEIP01,
			testStep230AssociateEIPWithShareBandwidth02,
			testStep230DescribeShareBandwidthPrice03,
			testStep230DescribeShareBandwidth04,
			testStep230ResizeShareBandwidth05,
			testStep230DescribeShareBandwidth06,
			testStep230DescribeEIP07,
			testStep230DisassociateEIPWithShareBandwidth08,
			testStep230DescribeEIP09,
			testStep230GetBandwidthSum10,
			testStep230ReleaseEIP11,
			testStep230ReleaseShareBandwidth12,
		},
	})
}

var testStep230AllocateShareBandwidth00 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("AllocateShareBandwidth")
		req.SetPayload(map[string]interface{}{
			"ShareBandwidth": step.Scenario.GetVar("sbw_bw"),
			"Region":         step.Scenario.GetVar("Region"),
			"Name":           step.Scenario.GetVar("sbw_name"),
			"ChargeType":     step.Scenario.GetVar("sbw_chargetype"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("sbw_id", step.Must(utils.GetValue(resp, "ShareBandwidthId")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    10,
	RetryInterval: 10 * time.Second,
	Title:         "开通共享带宽",
	FastFail:      false,
}

var testStep230AllocateEIP01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("AllocateEIP")
		req.SetPayload(map[string]interface{}{
			"Region":       step.Scenario.GetVar("Region"),
			"PayMode":      "Traffic",
			"OperatorName": step.Scenario.GetVar("eip_operatorname"),
			"Name":         "eip_auto",
			"ChargeType":   "Month",
			"Bandwidth":    step.Scenario.GetVar("eip_bw"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("eip_id", step.Must(utils.GetValue(resp, "EIPSet.0.EIPId")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    10,
	RetryInterval: 10 * time.Second,
	Title:         "申请弹性IP",
	FastFail:      false,
}

var testStep230AssociateEIPWithShareBandwidth02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("AssociateEIPWithShareBandwidth")
		req.SetPayload(map[string]interface{}{
			"ShareBandwidthId": step.Scenario.GetVar("sbw_id"),
			"Region":           step.Scenario.GetVar("Region"),
			"EIPIds": []interface{}{
				step.Scenario.GetVar("eip_id"),
			},
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(30) * time.Second,
	MaxRetries:    10,
	RetryInterval: 10 * time.Second,
	Title:         "将EIP加入共享带宽",
	FastFail:      false,
}

var testStep230DescribeShareBandwidthPrice03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeShareBandwidthPrice")
		req.SetPayload(map[string]interface{}{
			"ShareBandwidth": step.Scenario.GetVar("sbw_bw"),
			"Region":         step.Scenario.GetVar("Region"),
			"Quantity":       1,
			"ChargeType":     step.Scenario.GetVar("sbw_chargetype"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("TotalPrice", 0, "gt"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    10,
	RetryInterval: 10 * time.Second,
	Title:         "获取共享带宽价格",
	FastFail:      false,
}

var testStep230DescribeShareBandwidth04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeShareBandwidth")
		req.SetPayload(map[string]interface{}{
			"ShareBandwidthIds": []interface{}{
				step.Scenario.GetVar("sbw_id"),
			},
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.ShareBandwidthId", step.Scenario.GetVar("sbw_id"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.ShareBandwidth", step.Scenario.GetVar("sbw_bw"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.ChargeType", step.Scenario.GetVar("sbw_chargetype"), "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.Name", step.Scenario.GetVar("sbw_name"), "str_eq"),
			validation.Builtins.NewValidator("TotalCount", 1, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.EIPSet.0.EIPId", step.Scenario.GetVar("eip_id"), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    10,
	RetryInterval: 10 * time.Second,
	Title:         "获取共享带宽信息",
	FastFail:      false,
}

var testStep230ResizeShareBandwidth05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("ResizeShareBandwidth")
		req.SetPayload(map[string]interface{}{
			"ShareBandwidthId": step.Scenario.GetVar("sbw_id"),
			"ShareBandwidth":   step.Scenario.GetVar("resize_bw"),
			"Region":           step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    10,
	RetryInterval: 10 * time.Second,
	Title:         "调整共享带宽",
	FastFail:      false,
}

var testStep230DescribeShareBandwidth06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeShareBandwidth")
		req.SetPayload(map[string]interface{}{
			"ShareBandwidthIds": []interface{}{
				step.Scenario.GetVar("sbw_id"),
			},
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("DataSet.0.ShareBandwidth", step.Scenario.GetVar("resize_bw"), "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    10,
	RetryInterval: 10 * time.Second,
	Title:         "获取共享带宽信息",
	FastFail:      false,
}

var testStep230DescribeEIP07 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeEIP")
		req.SetPayload(map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"Offset": 0,
			"Limit":  100,
			"EIPIds": []interface{}{
				step.Scenario.GetVar("eip_id"),
			},
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("EIPSet.0.BandwidthType", 1, "str_eq"),
			validation.Builtins.NewValidator("EIPSet.0.PayMode", "ShareBandwidth", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取弹性IP信息",
	FastFail:      false,
}

var testStep230DisassociateEIPWithShareBandwidth08 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DisassociateEIPWithShareBandwidth")
		req.SetPayload(map[string]interface{}{
			"ShareBandwidthId": step.Scenario.GetVar("sbw_id"),
			"Region":           step.Scenario.GetVar("Region"),
			"EIPIds": []interface{}{
				step.Scenario.GetVar("eip_id"),
			},
			"Bandwidth": step.Scenario.GetVar("eip_bw"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(5) * time.Second,
	MaxRetries:    10,
	RetryInterval: 10 * time.Second,
	Title:         "将EIP移出共享带宽",
	FastFail:      false,
}

var testStep230DescribeEIP09 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeEIP")
		req.SetPayload(map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"Offset": 0,
			"Limit":  100,
			"EIPIds": []interface{}{
				step.Scenario.GetVar("eip_id"),
			},
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("EIPSet.0.BandwidthType", 0, "str_eq"),
			validation.Builtins.NewValidator("EIPSet.0.PayMode", "Bandwidth", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(10) * time.Second,
	MaxRetries:    3,
	RetryInterval: 10 * time.Second,
	Title:         "获取弹性IP信息",
	FastFail:      false,
}

var testStep230GetBandwidthSum10 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("GetBandwidthSum")
		req.SetPayload(map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Info.BwOutSum", 0, "gt"),
			validation.Builtins.NewValidator("Info.BwOutShareSum", 0, "gt"),
			validation.Builtins.NewValidator("Info.BwOutAll", 0, "gt"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取带宽总量信息",
	FastFail:      false,
}

var testStep230ReleaseEIP11 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("ReleaseEIP")
		req.SetPayload(map[string]interface{}{
			"Region": step.Scenario.GetVar("Region"),
			"EIPId":  step.Scenario.GetVar("eip_id"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    10,
	RetryInterval: 10 * time.Second,
	Title:         "释放弹性IP",
	FastFail:      false,
}

var testStep230ReleaseShareBandwidth12 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("ReleaseShareBandwidth")
		req.SetPayload(map[string]interface{}{
			"ShareBandwidthId": step.Scenario.GetVar("sbw_id"),
			"Region":           step.Scenario.GetVar("Region"),
			"EIPBandwidth":     2,
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
		}
	},
	StartupDelay:  time.Duration(3) * time.Second,
	MaxRetries:    10,
	RetryInterval: 10 * time.Second,
	Title:         "关闭共享带宽",
	FastFail:      false,
}
