// Code is generated by ucloud-model, DO NOT EDIT IT.

package tests

import (
	"testing"
	"time"

	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/driver"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/utils"
	"github.com/ucloud/ucloud-sdk-go/ucloud/utest/validation"

	"github.com/ucloud/ucloud-sdk-go/ucloud"
)

func TestSet1622(t *testing.T) {
	spec.ParallelTest(t, &driver.Scenario{
		PreCheck: func() {
			testAccPreCheck(t)
		},
		Id: 1622,
		Vars: func(scenario *driver.Scenario) map[string]interface{} {
			return map[string]interface{}{
				"Region":          "cn-sh2",
				"Zone":            "cn-sh2-02",
				"v_peer2":         "#{u_get_udpn_region_resource($Region)}",
				"create_udpn_bw":  2,
				"upgrade_udpn_bw": 3,
				"charge_type":     "Month",
				"project_id":      "org-tjn3wi",
			}
		},
		Owners: []string{"peter.zhang@ucloud.cn"},
		Title:  "UDPN-Mon",
		Steps: []*driver.Step{
			testStep1622GetUDPNLineList00,
			testStep1622GetUDPNPrice01,
			testStep1622AllocateUDPN02,
			testStep1622DescribeUDPN03,
			testStep1622GetUDPNUpgradePrice04,
			testStep1622ModifyUDPNBandwidth05,
			testStep1622ReleaseUDPN06,
		},
	})
}

var testStep1622GetUDPNLineList00 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("GetUDPNLineList")
		req.SetPayload(map[string]interface{}{
			"Region":    step.Scenario.GetVar("Region"),
			"ProjectId": step.Scenario.GetVar("project_id"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUDPNLineListResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取专线线路列表",
	FastFail:      false,
}

var testStep1622GetUDPNPrice01 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("GetUDPNPrice")
		req.SetPayload(map[string]interface{}{
			"Region":    step.Scenario.GetVar("Region"),
			"ProjectId": step.Scenario.GetVar("project_id"),
			"Peer2":     "^[v_peer2]",
			"Peer1":     step.Scenario.GetVar("Region"),
			"Bandwidth": 2,
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUDPNPriceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取 UDPN 价格",
	FastFail:      false,
}

var testStep1622AllocateUDPN02 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("AllocateUDPN")
		req.SetPayload(map[string]interface{}{
			"Region":     step.Scenario.GetVar("Region"),
			"ProjectId":  step.Scenario.GetVar("project_id"),
			"Peer2":      "^[v_peer2]",
			"Peer1":      step.Scenario.GetVar("Region"),
			"ChargeType": step.Scenario.GetVar("charge_type"),
			"Bandwidth":  step.Scenario.GetVar("create_udpn_bw"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		step.Scenario.SetVar("UdpnId", step.Must(utils.GetValue(resp, "UDPNId")))

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "AllocateUDPNResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "分配 UDPN 专线",
	FastFail:      false,
}

var testStep1622DescribeUDPN03 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("DescribeUDPN")
		req.SetPayload(map[string]interface{}{
			"UDPNId":    "^UdpnId",
			"Region":    step.Scenario.GetVar("Region"),
			"ProjectId": step.Scenario.GetVar("project_id"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "DescribeUDPNResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "描述 UDPN",
	FastFail:      false,
}

var testStep1622GetUDPNUpgradePrice04 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("GetUDPNUpgradePrice")
		req.SetPayload(map[string]interface{}{
			"UDPNId":    "^UdpnId",
			"Region":    step.Scenario.GetVar("Region"),
			"ProjectId": step.Scenario.GetVar("project_id"),
			"Bandwidth": step.Scenario.GetVar("upgrade_udpn_bw"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "GetUDPNUpgradePriceResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(0) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "获取升级价格",
	FastFail:      false,
}

var testStep1622ModifyUDPNBandwidth05 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("ModifyUDPNBandwidth")
		req.SetPayload(map[string]interface{}{
			"UDPNId":    "^UdpnId",
			"Region":    step.Scenario.GetVar("Region"),
			"ProjectId": step.Scenario.GetVar("project_id"),
			"Bandwidth": step.Scenario.GetVar("upgrade_udpn_bw"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ModifyUDPNBandwidthResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "修改带宽",
	FastFail:      false,
}

var testStep1622ReleaseUDPN06 = &driver.Step{
	Invoker: func(step *driver.Step) (interface{}, error) {
		c, err := step.NewClient("")
		if err != nil {
			return nil, err
		}
		client := c.(*ucloud.Client)
		req := client.NewGenericRequest()
		_ = req.SetAction("ReleaseUDPN")
		req.SetPayload(map[string]interface{}{
			"UDPNId":    "^UdpnId",
			"Region":    step.Scenario.GetVar("Region"),
			"ProjectId": step.Scenario.GetVar("project_id"),
		})

		resp, err := client.GenericInvoke(req)
		if err != nil {
			return resp, err
		}

		return resp, nil
	},
	Validators: func(step *driver.Step) []driver.TestValidator {
		return []driver.TestValidator{
			validation.Builtins.NewValidator("RetCode", 0, "str_eq"),
			validation.Builtins.NewValidator("Action", "ReleaseUDPNResponse", "str_eq"),
		}
	},
	StartupDelay:  time.Duration(1) * time.Second,
	MaxRetries:    3,
	RetryInterval: 1 * time.Second,
	Title:         "释放 UDPN",
	FastFail:      false,
}
